[{"content":"I have a template of a document written as an org file. I have to edit some fields in that file to be able to generate different versions of that document for different people. I export it as a text file to give the feel of a document written with an old-school software and printed with a dot matrix printer. Finally I convert the produced document to PDF.\nThe Problem Every now and then I have to produce a document that has to have the feel of old-school software and dot matrix printing. It has to have some fixed data, and some dynamic data, that is related to the special case at-hand. Without any automation, the process is like this:\nOpen the org file and edit the fields. Try not to forget about editing any of the fields. Not that it has ever happened to me 🙄. Export it to text C-c C-e t a. Convert the text file to pdf. I wondered if I could do this without needing to open the org file at all, and specially without forgetting about any of the fields. One command, type the substitutions and go! That would be ideal.\nThe Solution This solution is one of those cases where plain text is the king of formats.\nThe solution I devised is a bash script that I will call from the terminal, and it comes in four parts:\nAsk the user for the dynamic fields using bash\u0026rsquo;s read. Substitute the fields with the user input using sed. Export a temporary text file using emacs from the command line, and Convert the text file to PDF using cups. Ask the User for Dynamic Fields #!/usr/bin/bash read -p \u0026#34;Please input the year: \u0026#34; year read -p \u0026#34;Please input the name of the person: \u0026#34; nombre_sujeto read -p \u0026#34;Please input the text for other field: \u0026#34; other_field # Some more read commands similar to those above Substitute Fields in the Org File The plan in this step is to substitute the occurrences of \u0026ldquo;field\u0026rdquo; in the org file with the user-supplied value for \u0026ldquo;field\u0026rdquo; ($field), and do it with sed. The step after this will be to run the org-export command on the text produced by the substitution. Here we need to take into account that emacs will not read from standard input, but from a file. So we need to make the substitutions with sed, export the resulting text to a temporary file, and then run the org export command on that file.\nLet\u0026rsquo;s go over the first two parts:\n# Create the temporary file tempfile=$(mktemp /tmp/docXXXXXXXXXXXXXXX.org) # Make the substitutions with sed sed -e \u0026#34;s/year/$year/g\u0026#34; -e \u0026#34;s/nombre_sujeto/$nombre_sujeto/g\u0026#34; -e \u0026#34;s/other_field/$other_field/g\u0026#34; /full-path-to/template_document.org \u0026gt; \u0026#34;$tempfile\u0026#34; Some interesting things here:\nmktemp: It\u0026rsquo;s very useful for cases like this, where you need some intermediate output. Remember to delete after working with it! The use of double quotes [\u0026quot;] in sed. If you use single quotes, you\u0026rsquo;ll replace any occurrence of year with the literal text $year and not with your intended text, say 2025. We directed the results of the substitution to the temporary file. Run the Org Export Command on the Temporary File Emacs offers a very cool feature, that is allowing you to call a function on the input file. We\u0026rsquo;ll use that feature to run the org export command on our temporary file.\nemacs \u0026#34;$tempfile\u0026#34; --batch \\ -f org-ascii-export-to-ascii \\ --kill The -f flag is the one allowing you to define the function you want to run (org-ascii-export-to-ascii in our case).\nThe --batch flag prevents emacs from doing an interactive display, and the --kill quits without asking for confirmation (see emacs --help or man emacs).\nNow we need to do some minor housekeeping before our next and final step:\n# Create the name of the output file output_name=\u0026#34;document_${nombre_sujeto// /_}_$year.txt\u0026#34; # Rename the file produced by emacs to the new name mv \u0026#34;${tempfile%.org}.txt\u0026#34; \u0026#34;./$output_name\u0026#34; # Remove the Temporary file produced by sed rm \u0026#34;$tempfile\u0026#34; The ${nombre_sujeto// /_} part takes the value in nombre_sujeto and replaces any spaces in it with underscores. Thus, the value John Smith will produce John_Smith. The ${tempfile%.org} drops the .org part, just leaving the name of the file (without extension), adding then .txt. So say tempfile was docAFGERWESF42424.org, the name of the file we\u0026rsquo;re renaming is docAFGERWESF42424.txt, which is in fact the file produced by the org export command. We don\u0026rsquo;t want to keep that ugly name, and that\u0026rsquo;s why we\u0026rsquo;re renaming it to a more user-friendly name. Finally we delete the temporary file to leave no traces. \u0026ldquo;Take only pictures and leave only footprints.\u0026rdquo;\nConvert the Text File to PDF As I said before, one of the requirements of the project was to produce a document that had the feeling of being printed in a dot matrix printer. Exporting from org directly to PDF would not achieve that without some heavy LaTeX template work.\nSo the idea here is to retain as much as possible of the plain text format and feel while being able to produce a PDF file. While there are several options here, cups is the one that, in my opinion, produces the result I wanted. It\u0026rsquo;s also a very simple one-liner:\ncupsfilter \u0026#34;$output_name\u0026#34; \u0026gt; \u0026#34;${output_name%.txt}.pdf\u0026#34; And that\u0026rsquo;s it, I produced a PDF document with the feel of dot matrix printer from an org file, without even opening emacs.\n","permalink":"https://pavodive.github.io/posts/bash_orgmode_certificate/","summary":"\u003cp\u003eI have a template of a document written as an org file. I have to edit some fields in that file to be able to generate different versions of that document for different people. I export it as a text file to give the feel of a document written with an old-school software and printed with a dot matrix printer. Finally I convert the produced document to PDF.\u003c/p\u003e","title":"Bash Script for Edition and Exporting of an Org-mode Template"},{"content":"I recently faced the following problem: I had a PDF document created by merging several other documents, many of them containing multiple pages. I needed to display the page numbers in the document. Latex and pdftk to the rescue!\nThe Problem I needed to generate a PDF by merging multiple unrelated documents from different sources, resulting in a 57-page file. After that, I had to display the page number in the header as \u0026ldquo;Folio x/57\u0026rdquo;, where \u0026ldquo;x\u0026rdquo; represented the current page number (\u0026ldquo;Folio is the Spanish legalese for \u0026ldquo;page\u0026rdquo;).\nManually adding the headers with the page numbers was too tedious, so I devised a two-step solution.\nThe Solution The approach I came up with had two steps:\nGenerate a separate PDF with only the headers (\u0026ldquo;Folio x/57\u0026rdquo;) on each page. Merge this with the original document, so that the headers are superimposed on top. Generating a PDF with Only Page Numbers I needed to create 57 mostly empty pages with \u0026ldquo;Folio x/57\u0026rdquo; in the top-right corner. The page number needed to update dynamically for each page. While this could be done in different ways, generating a PDF file was the most sensible options.\nThere were several tools to create such a document, but I choose Latex, because it offered the simplest and most customizable solution. Customization was crucial, particularly for adjusting margins, since the original document had inconsistent ones. The geometry and fancyhdr packages in Latex provided the flexibility I needed.\nHere\u0026rsquo;s the code I used in pagination.tex:\n\\documentclass[12pt]{article} \\usepackage[paperwidth=8.5in, paperheight=11in, top=0.7in, right=0.5in, left=0.5in, bottom=0.5in]{geometry} \\usepackage{fancyhdr} \\usepackage{pgffor} \\pagestyle{fancy} \\fancyhf{} \\rhead{Folio \\thepage/57} \\begin{document} \\setcounter{page}{1} \\foreach \\n in {1,...,57} { \\null\\vfill\\eject } \\end{document} This script sets the document\u0026rsquo;s paper size and margins, defines the header format and then generates the pages using a loop, placing a new page break in each iteration.\nIf you are wondering why use \\vfill\\eject instead of \\newpage, I recommend checking out this question in tex.stackexchange.com.\nAfter compiling the LaTeX file, I obtained pagination.pdf, a beautifully blank document that displayed the page numbers in the appropriate places.\nMerging the New Document with the Original PDF The final step was merging the two PDFs –not just appending them, but actually overlaying them so that the headers from my new document appeared on top of the original content.\nFor this, I used pdftk, a fantastic tool for manipulating PDFs. The following one-liner did the trick:\npdftk original.pdf multistamp pagination.pdf output numbered.pdf original.pdf is the main document. pagination.pdf contains the headers. The multistamp option tells pdftk to overlay each page of pagination.pdf onto the corresponding page in original.pdf. The output flag generates the new, numbered PDF as numbered.pdf. And that\u0026rsquo;s it! I managed to solve a tedious problem with just a few lines of code. Now I\u0026rsquo;m sharing them with you –and with future me 😉.\n","permalink":"https://pavodive.github.io/posts/superimpose_page_number_pdf/","summary":"\u003cp\u003eI recently faced the following problem: I had a PDF document created by merging several other documents, many of them containing multiple pages. I needed to display the page numbers in the document. \u003cstrong\u003eLatex\u003c/strong\u003e and \u003cstrong\u003epdftk\u003c/strong\u003e to the rescue!\u003c/p\u003e","title":"Adding Page Numbers to a PDF Document"},{"content":"In this blog post, I want to show how I configured mu4e to read my Gmail accounts in Emacs.\nA lot of my time in front of a computer is spent in Emacs. In fact, this very blog is being written in Emacs. My agenda is kept in Emacs, I code in Emacs, write in Emacs, and even read books in Emacs. So, naturally, I wanted to manage my email in Emacs as well.\nSince I have multiple Gmail accounts, I needed to configure an email reader within Emacs.\nEmail Alternatives in Emacs There are two main alternatives for reading email in Emacs: Gnus and mu4e. As with many things in Emacs, which one you choose depends on personal preference—both are powerful, highly customizable, and offer numerous features.\nI tried Gnus some time ago. It’s a very powerful message reader, not limited to email, and allows extensive customization. One of its highly praised features is the ability to assign scores to messages, helping you prioritize what\u0026rsquo;s most important.\nHowever, to be honest, I never really developed a good workflow with Gnus. It was too feature-rich for my needs. I don’t receive an overwhelming number of emails, as I’ve consistently trimmed unnecessary messages—no subscriptions, no newsletters, and most of my friends and colleagues know that I prefer a phone call over an email.\nSo, I tried the alternative: mu4e. In some ways, mu4e is simpler than Gnus. It’s not as multipurpose, but it still offers a lot of customization and features.\nmu4e When I first looked into mu4e, it seemed a bit complicated to install and configure—especially for Gmail. So, I approached it with some skepticism. mu4e was developed and is maintained by Dirk-Jan Binnema, and you can check out its official page here.\nWhile the documentation is great, it isn’t exactly beginner-friendly.\nDuring my research, I found one particularly useful resource for installing and configuring mu4e with Gmail: this Reddit thread. It\u0026rsquo;s quite comprehensive, but since it\u0026rsquo;s from 2019, I struggled with the various changes Google has made to Gmail since then.\nMost of what I’ll be sharing here is a reworking of what Reddit user skizmi wrote.\nInstalling mu4e and Dependencies I needed to install isync along with some libraries required by mu4e. Since I’m using a Debian-based Linux distribution, I ran:\nsudo apt update sudo apt install isync -f sudo apt install libgmime-3.0-dev libxapian-dev This installs isync and the libraries required by mu4e.\nNow, to install mu (I use an apps directory to store installed software):\nmkdir -p apps/mu4e git clone https://github.com/djcb/mu.git cd mu ./autogen.sh \u0026amp;\u0026amp; make sudo make install This should install mu on your system. If you run into errors, carefully read the messages—it\u0026rsquo;s likely you\u0026rsquo;re missing some dependencies that can be installed with:\nsudo apt install [missing-library] Getting your Application-Specific Password From Google Now, we need an application-specific password for your Gmail account(s). Google encourages signing in via OAuth, but they still allow app-specific passwords for cases like this. Check this support page for more details.\nTo generate an app-specific password:\nVisit this link.\nEnter your credentials (you may need to provide two-factor authentication if enabled).\nSpecify a name for your app (choose something meaningful to you in the future).\nGoogle will provide a 16-character password formatted like this:\naaaa bbbb cccc dddd From the same page, you can remove unused or obsolete app-specific passwords. It’s good security practice to delete any that are no longer needed.\nSave this password—we’ll use it in the next steps.\nCreating the mbsync Configuration Files We need two files:\n.mbsyncrc .mbsyncpass (one per Gmail account) .mbsyncpass-test.gpg I recommend saving this file in ~/.emacs.d/mu4e/. In Emacs, create it with:\nC-x C-f ~/.emacs.d/mu4e/.mbsyncpass-test.gpg (Of course, replace \u0026ldquo;test\u0026rdquo; with your actual account name.) Paste your 16-character password into the file:\naaaa bbbb cccc dddd When you save (C-x C-s), Emacs will prompt you to select recipients for encryption. Confirm by hitting \u0026ldquo;OK\u0026rdquo;, provide a password (and confirm it), and your Gmail app-specific password will be encrypted.\nRepeat this for each Gmail account you’re configuring.\n.mbsyncrc Save this file in ~/.emacs.d/mu4e/. It contains account details, mail directories, and Gmail folder configurations.\nNote: Check whether your Gmail Trash folder is named \u0026ldquo;Trash\u0026rdquo; or \u0026ldquo;Bin\u0026rdquo;—this is crucial for proper operation.\nThe file\u0026rsquo;s contents are:\n# ACCOUNT INFORMATION IMAPAccount test-gmail # Address to connect to Host imap.gmail.com User test@gmail.com PassCmd \u0026#34;gpg -q --for-your-eyes-only --no-tty -d ~/.emacs.d/mu4e/.mbsyncpass-test.gpg\u0026#34; AuthMechs LOGIN SSLType IMAPS SSLVersions TLSv1.2 CertificateFile /etc/ssl/certs/ca-certificates.crt # REMOTE STORAGE (USE THE IMAP ACCOUNT SPECIFIED ABOVE) IMAPStore test-gmail-remote Account test-gmail # LOCAL STORAGE (CREATE DIRECTORIES with mkdir -p ~/Maildir/test-gmail) MaildirStore test-gmail-local Path ~/Maildir/test-gmail/ Inbox ~/Maildir/test-gmail/INBOX # CONNECTIONS SPECIFY LINKS BETWEEN REMOTE AND LOCAL FOLDERS # # CONNECTIONS ARE SPECIFIED USING PATTERNS, WHICH MATCH REMOTE MAIl # FOLDERS. SOME COMMONLY USED PATTERS INCLUDE: # # 1 \u0026#34;*\u0026#34; TO MATCH EVERYTHING # 2 \u0026#34;!DIR\u0026#34; TO EXCLUDE \u0026#34;DIR\u0026#34; # 3 \u0026#34;DIR\u0026#34; TO MATCH DIR Channel test-gmail-inbox Far :test-gmail-remote: Near :test-gmail-local: Patterns \u0026#34;INBOX\u0026#34; Create Both Expunge Both SyncState * Channel test-gmail-trash Far :test-gmail-remote:\u0026#34;[Gmail]/Trash\u0026#34; Near :test-gmail-local:\u0026#34;[test].Trash\u0026#34; Create Both Expunge Both SyncState * Channel test-gmail-sent Far :test-gmail-remote:\u0026#34;[Gmail]/Sent Mail\u0026#34; Near :test-gmail-local:\u0026#34;[test].Sent Mail\u0026#34; Create Both Expunge Both SyncState * Channel test-gmail-all Far :test-gmail-remote:\u0026#34;[Gmail]/All Mail\u0026#34; Near :test-gmail-local:\u0026#34;[test].All Mail\u0026#34; Create Both Expunge Both SyncState * Channel test-gmail-starred Far :test-gmail-remote:\u0026#34;[Gmail]/Starred\u0026#34; Near :test-gmail-local:\u0026#34;[test].Starred\u0026#34; Create Both Expunge Both SyncState * # GROUPS PUT TOGETHER CHANNELS, SO THAT WE CAN INVOKE # MBSYNC ON A GROUP TO SYNC ALL CHANNELS # # FOR INSTANCE: \u0026#34;mbsync gmail\u0026#34; GETS MAIL FROM # \u0026#34;gmail-inbox\u0026#34;, \u0026#34;gmail-sent\u0026#34;, and \u0026#34;gmail-trash\u0026#34; # Group test-gmail Channel test-gmail-inbox Channel test-gmail-sent Channel test-gmail-trash Channel test-gmail-all Channel test-gmail-starred If your trash is named \u0026ldquo;Bin\u0026rdquo;, replace:\nChannel test-gmail-trash Far :test-gmail-remote:\u0026#34;[Gmail]/Trash\u0026#34; Near :test-gmail-local:\u0026#34;[test].Trash\u0026#34; with:\nChannel test-gmail-trash Far :test-gmail-remote:\u0026#34;[Gmail]/Bin\u0026#34; Near :test-gmail-local:\u0026#34;[test].Bin\u0026#34; .authinfo.gpg If you don’t have a .authinfo.gpg file, create it in ~/.authinfo.gpg. Add:\nmachine smtp.gmail.com login test password \u0026#34;aaaa bbbb cccc dddd\u0026#34; port 465 machine imap.gmail.com login test password \u0026#34;aaaa bbbb cccc dddd\u0026#34; port 993 Replace “test” with your actual username and insert your app-specific password.\nFor multiple accounts, add entries for each one.\nCreating Maildir Folders and Running mbsync Next, create the Maildir directories and run mbsync:\nmkdir -p ~/Maildir/test-gmail (Be sure the name matches the IMAPAccount field in .mbsyncrc.) Repeat for each account.\nThen, run:\nmbsync -c .emacs.d/mu4e/.mbsyncrc -Dmn test-gmail Indexing Maildir Now, index your mail. This may take time, depending on the number and size of your stored messages.\nmu init --maildir=Maildir mu init --my-address=test@gmail.com mu index For multiple accounts, list them all in one line:\nmu init --my-address=test@gmail.com --my-address=other@gmail.com Adding mu4e Settings to .emacs Finally, add the necessary mu4e settings to your .emacs (or another initialization file).\n(require \u0026#39;org-mime) (add-to-list \u0026#39;load-path \u0026#34;/usr/local/share/emacs/site-lisp/mu4e/\u0026#34;) (require \u0026#39;mu4e) (setq mu4e-maildir (expand-file-name \u0026#34;~/Maildir\u0026#34;)) ; get mail (setq mu4e-get-mail-command \u0026#34;mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -a\u0026#34; mu4e-view-prefer-html t mu4e-update-interval 180 mu4e-headers-auto-update t mu4e-compose-signature-auto-include nil mu4e-compose-format-flowed t) ;; to view selected message in the browser, no signin, just html mail (add-to-list \u0026#39;mu4e-view-actions \u0026#39;(\u0026#34;ViewInBrowser\u0026#34; . mu4e-action-view-in-browser) t) ;; enable inline images (setq mu4e-view-show-images t) ;; use imagemagick, if available (when (fboundp \u0026#39;imagemagick-register-types) (imagemagick-register-types)) ;; every new email composition gets its own frame! (setq mu4e-compose-in-new-frame t) ;; don\u0026#39;t save message to Sent Messages, IMAP takes care of this ;;(setq mu4e-sent-messages-behavior \u0026#39;sent) (add-hook \u0026#39;mu4e-view-mode-hook #\u0026#39;visual-line-mode) ;; \u0026lt;tab\u0026gt; to navigate to links, \u0026lt;RET\u0026gt; to open them in browser (add-hook \u0026#39;mu4e-view-mode-hook (lambda() ;; try to emulate some of the eww key-bindings (local-set-key (kbd \u0026#34;\u0026lt;RET\u0026gt;\u0026#34;) \u0026#39;mu4e~view-browse-url-from-binding) (local-set-key (kbd \u0026#34;\u0026lt;tab\u0026gt;\u0026#34;) \u0026#39;shr-next-link) (local-set-key (kbd \u0026#34;\u0026lt;backtab\u0026gt;\u0026#34;) \u0026#39;shr-previous-link))) ;; from https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/elgoumx (add-hook \u0026#39;mu4e-headers-mode-hook (defun my/mu4e-change-headers () (interactive) (setq mu4e-headers-fields `((:human-date . 25) ;; alternatively, use :date (:flags . 6) (:from . 22) (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject (:size . 7))))) ;; spell check (add-hook \u0026#39;mu4e-compose-mode-hook (defun my-do-compose-stuff () \u0026#34;My settings for message composition.\u0026#34; (visual-line-mode) ; (org-mu4e-compose-org-mode) (use-hard-newlines -1) (flyspell-mode))) (require \u0026#39;smtpmail) ;;rename files when moving ;;NEEDED FOR MBSYNC (setq mu4e-change-filenames-when-moving t) ;;set up queue for offline email ;;use mu mkdir ~/Maildir/acc/queue to set up first (setq smtpmail-queue-mail nil) ;; start in normal mode ;; copied from https://emacs.stackexchange.com/questions/46257/sending-email-fails-with-process-smtpmail-not-running (setq smtpmail-stream-type \u0026#39;ssl) ;;from the info manual (setq mu4e-attachment-dir \u0026#34;~/Downloads\u0026#34;) (setq message-kill-buffer-on-exit t) (setq mu4e-compose-dont-reply-to-self t) (require \u0026#39;mu4e-org) ;; convert org mode to HTML automatically (setq org-mu4e-convert-to-html t) ;;from vxlabs config ;; show full addresses in view message (instead of just names) ;; toggle per name with M-RET (setq mu4e-view-show-addresses \u0026#39;t) ;; don\u0026#39;t ask when quitting (setq mu4e-confirm-quit nil) ;; mu4e-context (setq mu4e-context-policy \u0026#39;pick-first) (setq mu4e-compose-context-policy \u0026#39;always-ask) (setq mu4e-contexts (list (make-mu4e-context :name \u0026#34;gmail\u0026#34; ;;for test-gmail :enter-func (lambda () (mu4e-message \u0026#34;Entering context gmail\u0026#34;)) :leave-func (lambda () (mu4e-message \u0026#34;Leaving context gmail\u0026#34;)) :match-func (lambda (msg) (when msg (mu4e-message-contact-field-matches msg \u0026#39;(:from :to :cc :bcc) \u0026#34;test@gmail.com\u0026#34;))) :vars \u0026#39;((user-mail-address . \u0026#34;test@gmail.com\u0026#34;) (user-full-name . \u0026#34;Full Name Here\u0026#34;) (mu4e-sent-folder . \u0026#34;/test-gmail/[test].Sent\u0026#34;) (mu4e-drafts-folder . \u0026#34;/test-gmail/[test].drafts\u0026#34;) (mu4e-trash-folder . \u0026#34;/test-gmail/[test].Trash\u0026#34;) (mu4e-compose-signature . (concat \u0026#34;My Name Here\\n\u0026#34;)) (mu4e-compose-format-flowed . t) (smtpmail-queue-dir . \u0026#34;~/Maildir/test-gmail/queue/cur\u0026#34;) (message-send-mail-function . smtpmail-send-it) (smtpmail-smtp-user . \u0026#34;test\u0026#34;) (smtpmail-starttls-credentials . ((\u0026#34;smtp.gmail.com\u0026#34; 465 nil nil))) (smtpmail-auth-credentials . (expand-file-name \u0026#34;~/.authinfo.gpg\u0026#34;)) (smtpmail-default-smtp-server . \u0026#34;smtp.gmail.com\u0026#34;) (smtpmail-smtp-server . \u0026#34;smtp.gmail.com\u0026#34;) (smtpmail-smtp-service . 465) (smtpmail-debug-info . t) (smtpmail-debug-verbose . t) (mu4e-maildir-shortcuts . ( (\u0026#34;/test-gmail/INBOX\u0026#34; . ?i) (\u0026#34;/test-gmail/[test].Sent Mail\u0026#34; . ?s) (\u0026#34;/test-gmail/[test].Bin\u0026#34; . ?t) (\u0026#34;/test-gmail/[test].All Mail\u0026#34; . ?a) (\u0026#34;/test-gmail/[test].Starred\u0026#34; . ?r) (\u0026#34;/test-gmail/[test].drafts\u0026#34; . ?d) )))))) If configuring multiple accounts, add them to the mu4e-contexts list, ensuring each has a unique :name.\nAgain, configure the trash folder correctly (either \u0026ldquo;Trash\u0026rdquo; or \u0026ldquo;Bin\u0026rdquo;).\nEnjoy mu4e Now, restart Emacs and launch mu4e:\nM-x mu4e You should see the mu4e menu. From there, it\u0026rsquo;s relatively straightforward. To explore available commands, press h within the mu4e-main buffer.\nHappy emailing in Emacs! 🚀\n","permalink":"https://pavodive.github.io/posts/configuring-mu4e-gmail/","summary":"\u003cp\u003eIn this blog post, I want to show how I configured \u003cstrong\u003emu4e\u003c/strong\u003e to read my Gmail accounts in Emacs.\u003c/p\u003e","title":"Configure mu4e for gmail accounts in emacs"},{"content":"I work with many RMarkdown files structured within a hierarchy of directories. I needed to render these files to PDF and then use Ghostscript to merge them. This article explains the two small shell scripts I used for the task.\nThe Problem For a client project, I need to produce several PDF documents consisting of:\nA cover letter A report For reasons irrelevant to this article, the cover letter and report use different templates for rendering, so they cannot be combined before rendering. Both documents are written in RMarkdown (.Rmd files), which renders directly to PDF.\nEach project involves hundreds of cover–report pairs, making manual rendering impractical. The directory structure follows this pattern:\n📂--client-root 📂--project-1 | 📂--report | | |--cover.Rmd | | |--report_project-1.Rmd | 📂--data 📂--project-2 | 📂--report | | |--cover.Rmd | | |--report_project-2.Rmd | 📂--data Of course, in reality, my directories aren\u0026rsquo;t named \u0026ldquo;project-n\u0026rdquo;; they have real, meaningful names.\nI never, ever, use spaces or non-ASCII characters in any directory or file names.\nThe Solution I used a one-liner to render all Rmd files to PDF:\nfind client-root -type f -name \u0026#34;*.Rmd\u0026#34; | xargs -I{} Rscript -e \u0026#39;rmarkdown::render(\u0026#34;{}\u0026#34;)\u0026#39; How It Works find client-root -type f -name \u0026quot;*.Rmd\u0026quot; is a standard find command that:\nSearches within client-root Looks for files (-type f) Matches filenames ending in .Rmd (-name \u0026quot;*.Rmd\u0026quot;) The output is a list of file paths, e.g., ./client-root/project-1/report/cover.Rmd. The | (pipe) sends this list to the next command.\nxargs -I{} Rscript -e 'rmarkdown::render(\u0026quot;{}\u0026quot;)' processes each file:\nxargs constructs and executes commands for each file found. -I{} tells xargs to replace {} with each filename. Rscript -e runs an R expression (-e denotes inline execution). rmarkdown::render(\u0026quot;{}\u0026quot;) calls the R function to process each file dynamically, replacing {} with the actual filename. After running this, the directory structure now contains corresponding PDFs:\n📂--client-root 📂--project-1 | 📂--report | | |--cover.Rmd | | |--cover.pdf | | |--report_project-1.Rmd | | L--report_project-1.pdf | 📂--data 📂--project-2 | 📂--report | | |--cover.Rmd | | |--cover.pdf | | |--report_project-2.Rmd | | L--report_project-2.pdf | 📂--data A New Problem Now I needed to merge the cover and report PDFs for each project.\nFor a single project, I could do this manually using Ghostscript (gs):\ngs -dBATCH -dNOPAUSE -sDEVICE=pdfwrite \\ -sOutputFile=merged_report_project-1.pdf \\ cover.pdf report_project-1.pdf But since I had multiple projects, I needed to automate the process using Bash.\nAdditionally, I had to follow a naming convention: The merged file should start with \u0026quot;merged_\u0026quot;, followed by the report’s filename, e.g.:\nmerged_report_project-1.pdf Merging the PDFs To merge the PDFs, my approach was:\nLocate all report directories across projects. Extract file paths for the cover and report PDFs. Construct the merged filename dynamically. Use Ghostscript to merge the files. Here’s the script:\nfind client-root -type d -name \u0026#34;report\u0026#34; | \\ while read -r dir; do cover_pdf=\u0026#34;$dir/cover.pdf\u0026#34; report_pdf=(\u0026#34;$dir/report_\u0026#34;*.pdf) output_pdf=\u0026#34;$dir/merged_$(basename \u0026#34;${report_pdf[0]}\u0026#34;)\u0026#34; gs -dBATCH -dNOPAUSE -sDEVICE=pdfwrite \\ -sOutputFile=\u0026#34;$output_pdf\u0026#34; \\ \u0026#34;$cover_pdf\u0026#34; \\ \u0026#34;${report_pdf[0]}\u0026#34; done Understanding the Script Finding directories\nfind client-root -type d -name \u0026#34;report\u0026#34; Searches under client-root Finds only directories (-type d) named \u0026quot;report\u0026quot;. The results are piped to the next command. Processing each directory\nwhile read -r dir; do ... done Iterates over each directory found. read -r dir assigns each directory path to dir. The -r flag ensures the path is read literally, preventing unintended escape sequences. Defining the file paths\ncover_pdf=\u0026#34;$dir/cover.pdf\u0026#34; Constructs the path for the cover PDF. Quotes ensure correct handling if spaces exist (even though I avoid them). report_pdf=(\u0026#34;$dir/report_\u0026#34;*.pdf) Uses a wildcard (report_*.pdf) to match the report file. The parentheses create an array, allowing for multiple matches (though only one is expected). Constructing the merged filename\noutput_pdf=\u0026#34;$dir/merged_$(basename \u0026#34;${report_pdf[0]}\u0026#34;)\u0026#34; ${report_pdf[0]} selects the first (and expected only) match. basename strips the directory path, keeping only the filename. $( ... ) performs command substitution, inserting the result dynamically. \u0026quot;merged_\u0026quot; is prepended to create the final merged filename. Merging with Ghostscript\ngs -dBATCH -dNOPAUSE -sDEVICE=pdfwrite \\ -sOutputFile=\u0026#34;$output_pdf\u0026#34; \\ \u0026#34;$cover_pdf\u0026#34; \\ \u0026#34;${report_pdf[0]}\u0026#34; Combines the cover and report PDFs, saving as merged_report_project-N.pdf. If you\u0026rsquo;re curious about gs flags, check them out using man gs. And that’s it! Now all my merged_report_project-x.pdf files are generated automatically.\nBash saved me a lot of time, which I then used to write this post. Now back to work! 😇\n","permalink":"https://pavodive.github.io/posts/bash_scripts_rmarkdown/","summary":"\u003cp\u003eI work with many RMarkdown files structured within a hierarchy of directories. I needed to render these files to PDF and then use Ghostscript to merge them. This article explains the two small shell scripts I used for the task.\u003c/p\u003e","title":"Automating RMarkdown Rendering and PDF Merging with Bash"},{"content":"It was very easy to configure Elfeed in Emacs to have all the blogs and news from the sites I like, together in Emacs. In this short article, I share how I configured the Elfeed package with the RSS feeds of some of the blogs I enjoy reading. This is important for me because I often spend time filtering through a lot of content that I am not interested in on forums like lemmy.ml or reddit.com. Using this method is also a way to avoid ads and go directly to the content I want to see.\nElfeed Elfeed is a package for Emacs designed specifically to aggregate feeds. Most websites provide feeds where they \u0026ldquo;broadcast\u0026rdquo; newly added articles. Elfeed processes that information and presents it as an ordered table, where you can see the titles of the blogs or articles along with some additional details.\nTo install Elfeed in Emacs, simply (you’ll need MELPA or ELPA) do:\nM-x package-install RET elfeed RET Then, add this to your .emacs file:\n(global-set-key (kbd \u0026#34;C-x w\u0026#34;) \u0026#39;elfeed) (You can use C-x w or any other keybinding of your preference, in case you already have something assigned to C-x w.)\nNow, by invoking M-x elfeed or C-x w, you’ll get a (not-so-impressive) empty screen. That’s because we haven’t added any feeds yet. 📝\nAdding the Feeds To add feeds to Elfeed, simply use some code like this:\n(setq elfeed-feeds \u0026#39;((\u0026#34;https://url.del.feed/atom.xml\u0026#34; tag-name))) tag-name is the label (or labels) you want to assign to the tags for that specific source. Check out these examples:\n(setq elfeed-feeds \u0026#39;((\u0026#34;https://planet.emacslife.com/atom.xml\u0026#34; emacs) (\u0026#34;https://xenodium.com/rss\u0026#34; emacs) (\u0026#34;https://lemmy.ml/feeds/c/emacs.xml?sort=Active\u0026#34; emacs) (\u0026#34;https://programming.dev/feeds/c/django.xml?sort=Active\u0026#34; django))) Enjoying the Result Once you’ve loaded those feeds, open Elfeed again and reload with G (elfeed-search-fetch).\nThe result should look something like this:\nScreenshot of elfeed\nNow you can navigate between different posts, perform searches, and read the articles that spark your interest.\nNavigation within this screen is possible with the shortcuts you’ve configured for moving to the next and previous lines (C-n and C-p in vanilla Emacs), along with n (next-line) and p (previous-line). You can mark entries you’re not interested in as \u0026ldquo;read\u0026rdquo; using r (elfeed-search-untag-all-unread), or read them directly with RET (elfeed-search-show-entry).\nThe search functionality is triggered using s (elfeed-search-live-filter). It’s an incremental search, and you can filter results by dates and tags:\nWriting \u0026ldquo;lis\u0026rdquo; after invoking the search will display results containing: The word \u0026ldquo;list\u0026rdquo; The word \u0026ldquo;lisp\u0026rdquo; The word \u0026ldquo;eslip\u0026rdquo; The word \u0026ldquo;playlist\u0026rdquo; Search in elfeed\nThere are also other keyboard shortcuts you can explore—make sure to check them with C-h m or simply by pressing h (describe-mode).\nReading a Post To read an entry, select it and press RET. That’s all there is to it. In the majority of cases, the post will appear in Emacs, allowing you to read it right there. In cases where you prefer to read it in your system’s web browser, press b (elfeed-search-browse-url), and the post will open in your browser.\nReading a post in emacs\nThe same post appears like this in my browser:\nReading the same entry in Firefox\nA very interesting behavior of b is that it opens the post in a browser tab while simultaneously advancing to the next line in Elfeed. When you’ve used b for several entries you’re interested in, you’ll have multiple new tabs open in your browser.\nBut to tell the truth, I’d rather read them in Emacs itself 😉.\nI encourage you to explore this simple but powerful way of staying updated on the topics you care about while avoiding content you don’t want to see. To learn more about Elfeed, visit its GitHub page.\n","permalink":"https://pavodive.github.io/posts/emacs_rss_elfeed/","summary":"\u003cp\u003eIt was very easy to configure Elfeed in Emacs to have all the blogs and news from the sites I like, together in Emacs.\nIn this short article, I share how I configured the Elfeed package with the RSS feeds of some of the blogs I enjoy reading. This is important for me because I often spend time filtering through a lot of content that I am not interested in on forums like \u003ca href=\"https://lemmy.ml\"\u003elemmy.ml\u003c/a\u003e or \u003ca href=\"https://reddit.com\"\u003ereddit.com\u003c/a\u003e. Using this method is also a way to avoid ads and go directly to the content I want to see.\u003c/p\u003e","title":"RSS with elfeed in emacs"},{"content":"Merging tables is one of the most common tasks when analyzing data. And yet, I always seem to forget how joins (merges) are done in pandas 🐼. So here’s a reminder for future me (and apparently for you, if you happened to land here 😉).\nMerging with Pandas Our Base DataFrame import pandas as pd items = { \u0026#34;color\u0026#34;: [\u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;yellow\u0026#34;, \u0026#34;black\u0026#34;, \u0026#34;white\u0026#34;], \u0026#34;price\u0026#34;: [50, 1200, 3, 40, 2], \u0026#34;date_created\u0026#34;: [\u0026#34;1999-10-30 05:00:00\u0026#34;, \u0026#34;2002-08-21 08:23:00\u0026#34;, \u0026#34;2003-05-15 14:19:00\u0026#34;, \u0026#34;2006-11-29 11:21:00\u0026#34;, \u0026#34;2018-02-12 23:23:00\u0026#34;], \u0026#34;sku\u0026#34;: [\u0026#34;1999-ROS-01\u0026#34;, \u0026#34;2002-SKY-01\u0026#34;, \u0026#34;2003-YOL-03\u0026#34;, \u0026#34;2006-EBO-01\u0026#34;, \u0026#34;2018-SNO-03\u0026#34;] } items_df = pd.DataFrame(items) Joining (Merging) Two Pandas DataFrames Now, let’s merge (join) two dataframes using pandas. For this, we’ll create a dummy sales dataframe to compare with the one we already have. To illustrate the different types of joins, I’ve added a new SKU in the sales dataframe that doesn’t exist in items_df. I’ve also named the column sku_sales to demonstrate that the key columns in the two tables can have different names.\nYou’ll notice that I’m using pd.merge instead of pd.join. That’s because pd.join performs joins on indexes, whereas the more flexible pd.merge can join on columns.\nsales = pd.DataFrame({ \u0026#34;sku_sales\u0026#34;: [\u0026#34;1999-ROS-01\u0026#34;, \u0026#34;2018-SNO-03\u0026#34;, \u0026#34;2020-NAN-01\u0026#34;, \u0026#34;2006-EBO-01\u0026#34;], \u0026#34;qty_sold\u0026#34;: [100, 5, 7, 24] }) Left Join: All Items in Sales A left join includes all rows from the sales dataframe. If a row in sales does not match a row in items_df (based on the join key), you’ll get NaN values for the unmatched columns. This means that we’ll see all items in sales, but we won’t have information about items in items_df that didn’t sell.\nmerged_left = pd.merge(sales, items_df, left_on=\u0026#34;sku_sales\u0026#34;, right_on=\u0026#34;sku\u0026#34;, how=\u0026#34;left\u0026#34; ) print(merged_left) # sku_sales qty_sold color price date_created sku # 0 1999-ROS-01 100 red 50.0 1999-10-30 05:00:00 1999-ROS-01 # 1 2018-SNO-03 5 white 2.0 2018-02-12 23:23:00 2018-SNO-03 # 2 2020-NAN-01 7 NaN NaN NaN NaN # 3 2006-EBO-01 24 black 40.0 2006-11-29 11:21:00 2006-EBO-01 Tip: For both left and right joins, you may want to drop one of the duplicated key columns (sku_sales or sku). If you can’t remember how to drop a column (like me!), check this post.\nRight Join: All Items in items_df A right join includes all rows from the items_df dataframe. In this case, you’ll lose information about sales rows that don’t match. For example, the 2020-NAN-01 item is not included in the result because it doesn’t exist in items_df.\nmerged_right = pd.merge(sales, items_df, left_on=\u0026#34;sku_sales\u0026#34;, right_on=\u0026#34;sku\u0026#34;, how=\u0026#34;right\u0026#34; ) print(merged_right) # sku_sales qty_sold color price date_created sku # 0 1999-ROS-01 100.0 red 50 1999-10-30 05:00:00 1999-ROS-01 # 1 NaN NaN blue 1200 2002-08-21 08:23:00 2002-SKY-01 # 2 NaN NaN yellow 3 2003-05-15 14:19:00 2003-YOL-03 # 3 2006-EBO-01 24.0 black 40 2006-11-29 11:21:00 2006-EBO-01 # 4 2018-SNO-03 5.0 white 2 2018-02-12 23:23:00 2018-SNO-03 Outer Join (Union): Items from Both DataFrames Outer joins include all rows from both dataframes. If an item appears in only one of the dataframes, the unmatched columns will contain NaN values.\nmerged_outer = pd.merge(sales, items_df, left_on=\u0026#34;sku_sales\u0026#34;, right_on=\u0026#34;sku\u0026#34;, how=\u0026#34;outer\u0026#34; ) print(merged_outer) # sku_sales qty_sold color price date_created sku # 0 1999-ROS-01 100.0 red 50.0 1999-10-30 05:00:00 1999-ROS-01 # 1 NaN NaN blue 1200.0 2002-08-21 08:23:00 2002-SKY-01 # 2 NaN NaN yellow 3.0 2003-05-15 14:19:00 2003-YOL-03 # 3 2006-EBO-01 24.0 black 40.0 2006-11-29 11:21:00 2006-EBO-01 # 4 2018-SNO-03 5.0 white 2.0 2018-02-12 23:23:00 2018-SNO-03 # 5 2020-NAN-01 7.0 NaN NaN NaN NaN Inner Join (Intersection): Items in Both sales and items_df An inner join creates a new dataframe containing only the rows that exist in both dataframes (based on the join key).\nmerged_inner = pd.merge(sales, items_df, left_on=\u0026#34;sku_sales\u0026#34;, right_on=\u0026#34;sku\u0026#34;, how=\u0026#34;inner\u0026#34; ) print(merged_inner) # sku_sales qty_sold color price date_created sku # 0 1999-ROS-01 100 red 50 1999-10-30 05:00:00 1999-ROS-01 # 1 2018-SNO-03 5 white 2 2018-02-12 23:23:00 2018-SNO-03 # 2 2006-EBO-01 24 black 40 2006-11-29 11:21:00 2006-EBO-01 Cross Join: The Cartesian Product of Both DataFrames A cross join might be useful in certain edge cases (though not for this example). It produces the Cartesian product of the two dataframes, meaning every row in sales is combined with every row in items_df. Notice that left_on and right_on are not needed for this operation.\nmerged_cross = pd.merge(sales, items_df, how=\u0026#34;cross\u0026#34; ) print(merged_cross) # sku_sales qty_sold color price date_created sku # 0 1999-ROS-01 100 red 50 1999-10-30 05:00:00 1999-ROS-01 # 1 1999-ROS-01 100 blue 1200 2002-08-21 08:23:00 2002-SKY-01 # 2 1999-ROS-01 100 yellow 3 2003-05-15 14:19:00 2003-YOL-03 # 3 1999-ROS-01 100 black 40 2006-11-29 11:21:00 2006-EBO-01 # 4 1999-ROS-01 100 white 2 2018-02-12 23:23:00 2018-SNO-03 # 5 2018-SNO-03 5 red 50 1999-10-30 05:00:00 1999-ROS-01 # 6 2018-SNO-03 5 blue 1200 2002-08-21 08:23:00 2002-SKY-01 # 7 2018-SNO-03 5 yellow 3 2003-05-15 14:19:00 2003-YOL-03 # 8 2018-SNO-03 5 black 40 2006-11-29 11:21:00 2006-EBO-01 # 9 2018-SNO-03 5 white 2 2018-02-12 23:23:00 2018-SNO-03 # 10 2020-NAN-01 7 red 50 1999-10-30 05:00:00 1999-ROS-01 # 11 2020-NAN-01 7 blue 1200 2002-08-21 08:23:00 2002-SKY-01 # 12 2020-NAN-01 7 yellow 3 2003-05-15 14:19:00 2003-YOL-03 # 13 2020-NAN-01 7 black 40 2006-11-29 11:21:00 2006-EBO-01 # 14 2020-NAN-01 7 white 2 2018-02-12 23:23:00 2018-SNO-03 # 15 2006-EBO-01 24 red 50 1999-10-30 05:00:00 1999-ROS-01 # 16 2006-EBO-01 24 blue 1200 2002-08-21 08:23:00 2002-SKY-01 # 17 2006-EBO-01 24 yellow 3 2003-05-15 14:19:00 2003-YOL-03 # 18 2006-EBO-01 24 black 40 2006-11-29 11:21:00 2006-EBO-01 # 19 2006-EBO-01 24 white 2 2018-02-12 23:23:00 2018-SNO-03 ","permalink":"https://pavodive.github.io/posts/merge_pandas_operations/","summary":"\u003cp\u003eMerging tables is one of the most common tasks when analyzing data. And yet, I always seem to forget how joins (merges) are done in pandas 🐼. So here’s a reminder for future me (and apparently for you, if you happened to land here 😉).\u003c/p\u003e","title":"Basic Merge Pandas Operations"},{"content":"There are some operations with pandas that I often forget. This site exists exactly for that: to remind me how to perform these tasks. In this post, I’ll cover some very basic pandas operations that I often forget, including dropping columns, reordering columns, and changing the names of columns.\nPandas I won’t waste time explaining pandas 🐼, the powerful Python library for data processing. Pandas can handle many complex operations and is a must-have tool for anyone working with data.\nAt the time of writing this, I am much more proficient with R than pandas, which might explain why I repeatedly forget these simple operations.\nOur Base DataFrame import pandas as pd items = { \u0026#34;color\u0026#34;: [\u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;yellow\u0026#34;, \u0026#34;black\u0026#34;, \u0026#34;white\u0026#34;], \u0026#34;name\u0026#34;: [\u0026#34;rose\u0026#34;, \u0026#34;sky\u0026#34;, \u0026#34;yolk\u0026#34;, \u0026#34;ebony\u0026#34;, \u0026#34;snow\u0026#34;], \u0026#34;price\u0026#34;: [50, 1200, 3, 40, 2], \u0026#34;date_created\u0026#34;: [\u0026#34;1999-10-30 05:00:00\u0026#34;, \u0026#34;2002-08-21 08:23:00\u0026#34;, \u0026#34;2003-05-15 14:19:00\u0026#34;, \u0026#34;2006-11-29 11:21:00\u0026#34;, \u0026#34;2018-02-12 23:23:00\u0026#34; ], \u0026#34;useless_column\u0026#34;: [\u0026#34;data\u0026#34;, \u0026#34;data\u0026#34;, \u0026#34;data\u0026#34;, \u0026#34;data\u0026#34;, \u0026#34;data\u0026#34;], \u0026#34;id\u0026#34;: [\u0026#34;1999-ROS-01\u0026#34;, \u0026#34;2002-SKY-01\u0026#34;, \u0026#34;2003-YOL-03\u0026#34;, \u0026#34;2006-EBO-01\u0026#34;, \u0026#34;2018-SNO-03\u0026#34; ] } items_df = pd.DataFrame(items) Our base dataframe is a simple table containing miscellaneous data about items. There’s even an unnecessary column, which we’ll remove shortly.\nDropping Columns Let’s get rid of the useless column. The inplace=True parameter is self-explanatory: it removes the column in place rather than returning a new object. This way, the original dataframe is directly updated.\nitems_df.drop(columns=[\u0026#34;useless_column\u0026#34;], inplace=True) Reordering Columns Sometimes, I need to export dataframes to tables or CSV files where the ordering of columns matters for end users. Reordering columns is as simple as passing a list of column names in the desired order:\nname_order = [\u0026#34;id\u0026#34;, \u0026#34;date_created\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;color\u0026#34;, \u0026#34;price\u0026#34;] items_df = items_df[name_order] Changing the Names of Columns Another operation I often need is renaming columns. To rename columns, pass a dictionary in the format {\u0026quot;old_name\u0026quot;: \u0026quot;new_name\u0026quot;} to the rename method.\nitems_df.rename(columns={\u0026#34;id\u0026#34;: \u0026#34;sku\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;Color\u0026#34;}, inplace=True) ","permalink":"https://pavodive.github.io/posts/basic_pandas_operations/","summary":"\u003cp\u003eThere are some operations with pandas that I often forget. This site exists exactly for that: to remind me how to perform these tasks. In this post, I’ll cover some very basic pandas operations that I often forget, including dropping columns, reordering columns, and changing the names of columns.\u003c/p\u003e","title":"Basic Pandas Operations"},{"content":"Dates and date-time objects are some of the most challenging data types to work with. They can come in a variety of formats (long live ISO 8601!), may have different time zones, and introduce considerable complexity as a result.\nAside from variations in format, such discrepancies can cause massive issues:\nMoreover, time zones add yet another layer of potential confusion. Let’s see how pandas 🐼 handles this.\nOur Base DataFrame import pandas as pd items = { \u0026#34;name\u0026#34;: [\u0026#34;rose\u0026#34;, \u0026#34;sky\u0026#34;, \u0026#34;yolk\u0026#34;, \u0026#34;ebony\u0026#34;, \u0026#34;snow\u0026#34;], \u0026#34;price\u0026#34;: [50, 1200, 3, 40, 2], \u0026#34;date_created\u0026#34;: [\u0026#34;1999-10-30 05:00:00\u0026#34;, \u0026#34;2002-08-21 08:23:00\u0026#34;, \u0026#34;2003-05-15 14:19:00\u0026#34;, \u0026#34;2006-11-29 11:21:00\u0026#34;, \u0026#34;2018-02-12 23:23:00\u0026#34; ], } items_df = pd.DataFrame(items) Converting Strings to Dates in Pandas Let’s check how pandas interprets the data types in our dataframe:\nprint(items_df.dtypes) # Output: # name object # price int64 # date_created object As we can see, the date_created column is treated as an object (likely because it contains strings). To handle it as a date-time, we must convert it:\nitems_df[\u0026#34;date_created\u0026#34;] = pd.to_datetime(items_df[\u0026#34;date_created\u0026#34;]) print(items_df.dtypes) # Output: # name object # price int64 # date_created datetime64[ns] Now the date_created column is properly processed as datetime64[ns].\nFiltering a DataFrame by a Date Pandas’ handling of dates and times remains a bit mysterious to me. I understand that dates and times are inherently complex, but pandas\u0026rsquo; behavior can sometimes feel confusing. For instance, consider this Stack Overflow question and Quant’s detailed answer. While the diagram isn’t perfectly up-to-date (as of 2025-01-19), it’s still quite relevant and demonstrates the complexity involved!\nHere’s one such surprising behavior:\nWhile our date_created column shows a type of datetime64[ns], attempting to access its individual elements reveals something slightly different:\nprint(type(items_df[\u0026#34;date_created\u0026#34;].iloc[1])) # Output: \u0026lt;class \u0026#39;pandas._libs.tslibs.timestamps.Timestamp\u0026#39;\u0026gt; When we try to filter this column using a simple string date, pandas automatically coerces the string to a date, and the operation works as expected:\nstart_date_1 = \u0026#34;2000-01-01\u0026#34; filtered_items_1 = items_df[items_df[\u0026#34;date_created\u0026#34;] \u0026gt;= start_date_1] print(filtered_items_1) However, if the string includes both a time and a time zone, pandas no longer performs automatic coercion, causing the operation to fail:\nstart_date_2 = \u0026#34;2000-01-01 00:00:00-05:00\u0026#34; try: filtered_items_2 = items_df[items_df[\u0026#34;date_created\u0026#34;] \u0026gt;= start_date_2] except Exception as e: print(e) filtered_items_2 = \u0026#34;Nothing to see here\u0026#34; finally: print(filtered_items_2) # Output: # Invalid comparison between dtype=datetime64[ns] and str # Nothing to see here Pandas, perhaps cautiously, avoids coercion in this case, leaving the responsibility to us. Let’s fix this manually by converting the string to a timestamp using the same method we used earlier:\nstart_date_2 = pd.to_datetime(start_date_2) print(type(start_date_2) == type(items_df[\u0026#34;date_created\u0026#34;].iloc[1])) # Output: True # Both are \u0026lt;class \u0026#39;pandas._libs.tslibs.timestamps.Timestamp\u0026#39;\u0026gt; At this point, the two values appear to be of the same type, but they still can’t be compared:\ntry: items_df[\u0026#39;date_created\u0026#39;].iloc[1] \u0026gt; start_date_2 except Exception as e: print(e) finally: pass # Output: # Cannot compare tz-naive and tz-aware timestamps The error occurs because one value is timezone-naive (lacking information about the time zone), and the other is timezone-aware. To proceed, we must convert one of them to match the other.\nSolution 1: Convert start_date_2 to Timezone-Naive start_date_naive = start_date_2.tz_localize(None) try: filtered_items_2 = items_df[items_df[\u0026#34;date_created\u0026#34;] \u0026gt;= start_date_naive] except Exception as e: print(e) filtered_items_2 = \u0026#34;Nothing to see here\u0026#34; finally: print(filtered_items_2) # The filtering succeeds! 🥳 Solution 2: Convert items_df[\u0026quot;date_created\u0026quot;] to Timezone-Aware # Create a new column (optional) items_df[\u0026#34;new_date_created\u0026#34;] = items_df[\u0026#34;date_created\u0026#34;].dt.tz_localize(\u0026#34;America/Bogota\u0026#34;) # Now we can compare against our original timezone-aware variable try: filtered_items_2 = items_df[items_df[\u0026#34;new_date_created\u0026#34;] \u0026gt;= start_date_2] except Exception as e: print(e) filtered_items_2 = \u0026#34;Nothing to see here\u0026#34; finally: print(filtered_items_2) # It works! 🥳 A key insight here is the .dt accessor, which acts as a gateway to apply date-time operations on pandas Series. According to the documentation, the .dt accessor \u0026ldquo;returns a Series indexed like the original Series. Raises TypeError if the Series does not contain datetimelike values.\u0026rdquo; This is essential because tz_localize operates on datetime objects, not directly on Series (thanks wordsforthewise for the hint!).\nDates and times can be tricky, but pandas provides powerful tools to manage them. With some care and awareness of datetime intricacies, you’ll master these challengesin no time! 🐼\n","permalink":"https://pavodive.github.io/posts/time_pandas_operations/","summary":"\u003cp\u003eDates and date-time objects are some of the most challenging data types to work with. They can come in a variety of formats (long live \u003ca href=\"https://en.wikipedia.org/wiki/ISO_8601\"\u003eISO 8601\u003c/a\u003e!), may have different time zones, and introduce considerable complexity as a result.\u003c/p\u003e","title":"Basic Time Pandas Operations"},{"content":"In legal documents in Spanish language it is often necessary to include the \u0026ldquo;value in words\u0026rdquo; of a number—for example, $2400 (dos mil cuatrocientos pesos). I created the package spanish2 to automate this task. If you are curious to learn more about this package, please keep reading. If you\u0026rsquo;d like to install it or view its code, you can access its GitHub repository. Writing this package inspired this article about how to write an R package using Emacs and ESS (Emacs Speaks Statistics). You might want to check it out!\nWhy Write the Value in Words? I\u0026rsquo;m not sure if this is just a custom in my home country 🇨🇴, but in Colombia, it is common practice to include the value in words immediately after its numeric representation in legal documents. For example:\n\u0026hellip;con un precio de $1.000.000 (un millón de pesos)\u0026hellip;\nor\n\u0026hellip;el lote tiene un área de 43 ha (cuarenta y tres hectáreas)\u0026hellip;\nOver the past few months, I encountered this requirement repeatedly in the context of some ongoing collaborations.\nWhat alternatives did I have? There is a package in CRAN and in github called spanish that almost met my needs. This package provides a function, spanish::to_words(), for converting numbers into text. However, the function presented some limitations.\nFirst Issue: Incorrect Number Representation In certain cases, the package generated incorrect word representations for numbers. For instance:\n1 2 spanish::to_words(40000000) # \u0026#34;cuarenta millones mil \u0026#34; I managed to identify and suggest fixes for some of these issues, but additional errors emerged under less-than-ideal circumstances—such as when I had already delivered a finished document to a client. 😵\nSecond Issue: Limited Range Another significant limitation of the package was that it could not handle numbers larger than 999,999,999.\nCreating a Solution: spanish2 Faced with these challenges, I decided to create my own solution. There\u0026rsquo;s nothing better than standardizing solutions you find helpful for yourself, as there\u0026rsquo;s a good chance others might find them useful as well. This is how the spanish2 package was born.\nImportant Note: While the spanish package did not meet my specific needs for this task, it offers several unique and valuable functions. For example, to_number() converts text-based numbers back into numeric values, and the package also includes functionality related to geolocation in Spain. If these features sound interesting, I encourage you to give the spanish package a try!\nSolution Strategy To convert numbers into words, I followed the same logical principle we use when reading numbers in Spanish:\nGroup the digits in sets of three, from right to left. Read these groups as \u0026ldquo;hundreds\u0026rdquo; (this concept was key—bear with me 😉). Combine the different \u0026ldquo;hundred\u0026rdquo; blocks. Finally, clean the resulting text. Group Digits in Threes and Read Them as \u0026ldquo;Hundreds\u0026rdquo; The first task involves converting the number into a string and splitting it into groups of three digits. We use a regular expression (regex) to accomplish this:\ngroups = regmatches(y, gregexpr(\u0026#34;.{1,3}(?=(.{3})*$)\u0026#34;, y, perl = TRUE))[[1]] Once the number is split into groups of three digits, we pass each group to the function convert_3_digits. This function is responsible for \u0026ldquo;reading\u0026rdquo; the hundreds, tens, and units:\n1 2 3 4 5 6 7 8 9 10 convert_3_digits = function(string_value){ units = c(\u0026#34;cero\u0026#34;, \u0026#34;uno\u0026#34;, \u0026#34;dos\u0026#34;, \u0026#34;tres\u0026#34;, \u0026#34;cuatro\u0026#34;, \u0026#34;cinco\u0026#34;, \u0026#34;seis\u0026#34;, \u0026#34;siete\u0026#34;, \u0026#34;ocho\u0026#34;, \u0026#34;nueve\u0026#34;) string_value = sprintf(\u0026#34;%03d\u0026#34;, as.integer(string_value)) digits = strsplit(string_value, \u0026#34;\u0026#34;)[[1]] a = sapply(digits, function(x) units[as.integer(x) + 1]) raw_text = mapply(paste0, a, c(\u0026#34;cientos\u0026#34;, \u0026#34;diez y\u0026#34;, \u0026#34;\u0026#34;)) clean_text(paste(raw_text, collapse = \u0026#34; \u0026#34;)) } Here’s what is happening in detail:\nThe sapply function converts each digit into its corresponding word. For example, 234 becomes c(\u0026quot;dos\u0026quot;, \u0026quot;tres\u0026quot;, \u0026quot;cuatro\u0026quot;). The mapply function maps this vector of words to another vector specifying hundreds, tens, and units. This results in \u0026quot;dos cientos tres diez y cuatro\u0026quot;. Finally, the function clean_text handles edge cases such as \u0026ldquo;tres diez\u0026rdquo; (which should become \u0026ldquo;treinta\u0026rdquo;) to ensure the text is properly formatted. Map the Big Units At this point, we have the number converted into text groups of three. For instance, the number 1,234,567 would be converted into c(\u0026quot;cero cientos cero diez y uno\u0026quot;, \u0026quot;dos cientos tres diez y cuatro\u0026quot;, \u0026quot;cinco cientos seis diez y siete\u0026quot;).\nClearly, this output doesn’t quite make sense. To address this, we need to map each group to its corresponding \u0026ldquo;big units\u0026rdquo; (i.e., thousands or millions).\nThe second group (from right to left) represents thousands (mil), and the third group corresponds to millions (millones). After applying mapply, the text becomes \u0026ldquo;cero cientos cero diez y uno millones dos cientos tres diez y cuatro mil cinco cientos seis diez y siete\u0026rdquo;. While it may still look rough, the structure is now correct.\nClean the Text In the final step, we use the gsub function extensively to clean up the text. This involves applying regular expression replacements to handle edge cases and improve readability. Here’s what we do:\nRemove unnecessary elements: For example, \u0026ldquo;cero cientos\u0026rdquo; and \u0026ldquo;cero diez y\u0026rdquo; should be removed entirely, as they are redundant. Fix special pronunciations: Certain phrases like \u0026ldquo;diez y cinco\u0026rdquo; are replaced with their proper counterparts (e.g., \u0026ldquo;diez y cinco\u0026rdquo; becomes \u0026ldquo;quince,\u0026rdquo; and \u0026ldquo;diez y tres\u0026rdquo; becomes \u0026ldquo;trece\u0026rdquo;). What We Achieved The function spanish2::to_words() can convert numbers up to 1e22 or strings with numeric values up to 60 characters in length. Those are really big numbers!\nThe conversion to text adheres to the conventions of the Spanish language, specifically using the long scale. As a result, the number 1e9 (1,000,000,000) is converted to \u0026ldquo;mil millones\u0026rdquo;, not \u0026ldquo;un billón\u0026rdquo;, which may be the expectation of English speakers who are used to the short scale.\nAdditionally, the conversion produces the most standard and simple way of expressing a number in Spanish, even though alternative representations may exist. Here\u0026rsquo;s a comparison of some examples:\nNumber Common Style 1 Other Styles spanish2 Output 77 Setenta y siete setenta y siete 16 Dieciséis Diez y seis diez y seis 27 Veintisiete Veinte y siete veinte y siete 1100 Mil cien Mil ciento / mil y ciento mil cien I hope this package proves to be useful to you! If it does, how about giving it a ⭐ on GitHub? 😊\nStar the repository on GitHub ⭐\n","permalink":"https://pavodive.github.io/posts/spanish2/","summary":"\u003cp\u003eIn legal documents in Spanish language it is often necessary to include the \u0026ldquo;value in words\u0026rdquo; of a number—for example, $2400 (dos mil cuatrocientos pesos). I created the package \u003ccode\u003espanish2\u003c/code\u003e to automate this task. If you are curious to learn more about this package, please keep reading. If you\u0026rsquo;d like to install it or view its code, you can access its \u003ca href=\"https://github.com/pavodive/spanish2\"\u003eGitHub repository\u003c/a\u003e. Writing this package inspired \u003ca href=\"https://pavodive.github.io/posts/writing-r-package-emacs/\" title=\"Writing an R package with Emacs\u0026#39; ESS\"\u003ethis article\u003c/a\u003e about how to write an R package using Emacs and ESS (Emacs Speaks Statistics). You might want to check it out!\u003c/p\u003e","title":"Paquete spanish2 para R"},{"content":"This article provides a step-by-step guide to writing R packages using Emacs\u0026rsquo; ESS (Emacs Speaks Statistics) mode. By the end, you\u0026rsquo;ll have created a simple package called dummyaddition, which can perform the simple task of adding two numbers or paste two strings.\nWhy Emacs? Emacs is one of those pieces of software that has stood the test of time. While some may argue that its age is a disadvantage, I would say that the fact it remains relevant after more than 40 years is proof of its robust design and adaptability to modern needs.\nIt’s far more than just a text editor or an IDE—it’s a powerful tool that has allowed me to develop a highly efficient workflow.\nHere are some reasons why I prefer Emacs:\nKeyboard-Centric Efficiency Emacs is command-line-based, meaning almost every possible action can be executed via the keyboard. I rarely use the mouse during my workflow. Relying on the mouse can strain your hands and arms, and it wastes time in unnecessary movements.\nExtensibility and Customization Emacs is incredibly extensible and highly customizable. Whether you prefer to keep it simple or turn it into a complex powerhouse, you can tweak it to fit your needs and fulfill your specific desires.\nEasy to Learn Although some people say the learning curve for Emacs is steep, I disagree. Vanilla (unmodified) Emacs is very simple to use, and it comes with excellent documentation. You can start by point-and-clicking while familiarizing yourself with the keyboard shortcuts. It’s not a radical difference from what you\u0026rsquo;re likely using now. Over time, you’ll gradually learn to enhance and tailor Emacs to make it more efficient for your workflow.\nFree and Open Source Emacs is free—both as in 🍺 (beer) and as in freedom. You can install it on any operating system at no cost. Not only do you not have to pay, but also nothing is taken from you: not your data, your software interactions, or your privacy.\nBeing open-source means you can modify Emacs and even share your tweaks with others—without anyone coming after you with legal concerns. It embodies true software freedom.\nWhy a Package? One of the fundamental goals of software development is automation. Tasks we do frequently should be made quicker and easier to execute. It\u0026rsquo;s a common scenario: you write a function once, then you need it again, and again\u0026hellip;\nInstead of rewriting the same function multiple times (trust me, I’ve been there—it’s not fun), or wasting time searching for where you wrote it last, it’s better to consolidate those functions into a package. A package allows you to load and reuse those functions effortlessly whenever you need them.\nCreating a package also means you can share your functions with others who might be facing the same problem you solved. By writing packages, you’re contributing to a collaborative environment. After all, I’m sure you’ve relied heavily on R packages created by others—so why not give back?\nEnd Result By following this step-by-step guide, you will create a new package called dummyaddition. This package, while basic, will demonstrate the essential steps involved in creating an R package. You’ll host your version in your GitHub repository, but if you’d like to see mine for reference, here’s the link: dummyaddition.\nStep by Step Magit for Version Control Create a Repository on Github The first step is to create a new repository on your GitHub account. I\u0026rsquo;ve named mine dummyaddition, but feel free to choose a name that makes sense for your project. While filling out the description field is optional, I highly recommend doing so—it’s helpful to have a clear description for each repository.\nKeep in mind that the R package naming conventions (required by CRAN) allow only ASCII characters and numbers. Avoid using special characters like dashes, underscores, or periods in the name.\nYou also have the option to make the repository public or private. If you\u0026rsquo;re planning to share your code (which I strongly encourage), make the repository public.\nBefore creating the repository, configure the following minor but important settings:\nInitialize with a README.md: Check this box. We\u0026rsquo;ll use the README later. Add a .gitignore file: Select the R template. This ensures that Git ignores unnecessary files, such as .history, which don’t add value to your project. Choose a License: GitHub offers several license options. Two common ones are the MIT License and the GNU General Public License v3.0. Be sure to read about their differences, as they may affect how your software can be used. For this tutorial, I’ve chosen the GNU General Public License v3.0. Additionally, check the licenses of the R packages you plan to use in your code. Some licenses require you to adopt compatible or less restrictive licenses for your package. Once you\u0026rsquo;ve configured the settings, click the Create Repository button.\nMagit Magit is an Emacs package that acts as a hybrid between a graphical Git client and the standard command-line Git interface. It provides user-friendly commands for Git actions. I use Magit because it simplifies interacting with Git, and I only need to remember a few basic commands. It’s user-friendly, and if you want to explore the actual Git commands it runs under the hood, they’re readily available for auditing and study.\nIf Git is not installed on your system, you can follow the official installation instructions here.\nAfter installing Git, configure your name and email to associate commits with your identity:\ngit config --global user.name \u0026#34;John Doe\u0026#34; git config --global user.email johndoe@example.com Next, install Magit for Emacs. If you haven’t installed it yet, I recommend doing so via MELPA, the Emacs package repository. Add the following lines to your .emacs file:\n(require \u0026#39;package) (add-to-list \u0026#39;package-archives \u0026#39;(\u0026#34;melpa\u0026#34; . \u0026#34;https://melpa.org/packages/\u0026#34;) t) Select this block of text, evaluate it in Emacs by pressing M-x eval-region RET, and then refresh your package list with:\nM-x package-refresh-contents RET You can now install Magit (and its dependencies) by running:\nM-x package-install RET magit RET To ensure everything works as expected, restart your Emacs session. This resets the load-path and avoids potential issues with outdated configurations.\nCloning the Repository Now it\u0026rsquo;s time to clone the GitHub repository onto your computer.\nNavigate to the directory where you’d like to clone the repository. For example, if you\u0026rsquo;d like to clone it into ~/Documents, open Emacs’ Dired mode with C-x D and enter ~/Documents/ to open the corresponding directory.\nNext, run the following command in Emacs:\nM-x magit-clone Magit will ask where you\u0026rsquo;d like to clone the repository from. Choose [u] for URL. Then, paste the repository URL from your GitHub page. You can find the URL by clicking the green \u0026ldquo;\u0026lt;\u0026gt; Code\u0026rdquo; button and copying the HTTPS URL. For example:\nhttps://github.com/PavoDive/dummyaddition.git Paste this URL into Magit’s minibuffer.\nMagit will then ask you to confirm the name of the subdirectory where the repository will be cloned. By default, it suggests the repository\u0026rsquo;s name (e.g., dummyaddition). I recommend keeping this to maintain consistency.\nIt will also ask, \u0026ldquo;Set remote.pushDefault to origin? (y or n)\u0026rdquo;. Since this is the start of a new repository, you can safely choose yes (y).\nAfter a short while, Magit will finish the cloning process and display a new buffer with the repository\u0026rsquo;s details and the most recent commit. You might need to press TAB to expand the details of the commits.\nTo verify the repository has been cloned, refresh the Dired buffer by pressing g. You should see a new directory—dummyaddition—inside your ~/Documents folder. Navigate to this directory, and you\u0026rsquo;ll find:\ndrwxrwxr-x 8 gp gp 4.0K Jan 11 17:44 .git -rw-rw-r-- 1 gp gp 671 Jan 11 17:44 .gitignore -rw-rw-r-- 1 gp gp 35K Jan 11 17:44 LICENSE -rw-rw-r-- 1 gp gp 26 Jan 11 17:44 README.md These include the files and folders created during the GitHub setup:\n.gitignore: Preconfigured to ignore unnecessary files. LICENSE: The license you selected during setup. README.md: The initial README file. .git/: A hidden directory containing version control metadata. Ready to Start Developing You are now ready to start developing your R package! 🎉\nRequired Packages To make writing R packages easier and more efficient, we need to install two essential packages:\nrmarkdown: Converts R Markdown documents into various formats. devtools: A collection of package development tools—a package to help you develop packages! If these aren\u0026rsquo;t installed yet, start a new R session in your Documents directory by running M-x R in Emacs. Once the R session starts, enter the following commands:\ninstall.packages(\u0026#34;rmarkdown\u0026#34;) install.packages(\u0026#34;devtools\u0026#34;) These packages may require additional dependencies. Since the installation process varies depending on your system, you might encounter errors. If so, don’t worry! Take a deep breath, search for the errors, and troubleshoot any issues you encounter.\nKeep Calm and Try Again\nAfter successfully installing the packages, load them in your R session:\nlibrary(rmarkdown) library(devtools) Create a Package Now that we’ve set up the necessary tools, let\u0026rsquo;s create the package. In your R session, run:\ncreate(\u0026#34;dummyaddition\u0026#34;) This will create a new R package named dummyaddition, inside a corresponding dummyaddition directory.\n⚠ Important Note: Ensure that your R session is not inside the dummyaddition directory when running devtools::create. Otherwise, it will attempt to create a nested package (e.g., a dummyaddition folder inside another dummyaddition folder), which can be problematic.\nWhen executed, the function prints the following information in your R console:\n✔ Setting active project to \u0026#34;/home/gp/Documents/dummyaddition\u0026#34;. ✔ Creating R/. ✔ Writing DESCRIPTION. Package: dummyaddition Title: What the Package Does (One Line, Title Case) Version: 0.0.0.9000 Authors@R (parsed): * First Last \u0026lt;first.last@example.com\u0026gt; [aut, cre] Description: What the package does (one paragraph). License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a license Encoding: UTF-8 Roxygen: list(markdown = TRUE) RoxygenNote: 7.3.2 ✔ Writing NAMESPACE. ✔ Setting active project to \u0026#34;\u0026lt;no active project\u0026gt;\u0026#34;. What Gets Created? You\u0026rsquo;ll notice the following new elements in your dummyaddition folder:\nDESCRIPTION: Describes the metadata of your package (e.g., name, author, version, and description). Edit this file following the instructions within it. NAMESPACE: Manages exported and imported functions. This file is automatically generated—avoid editing it manually. R/: A folder to store your package functions and code. Currently, it is empty. At this point, we have the skeleton of the package. Let’s move on to writing the code!\nWriting the Code Let\u0026rsquo;s define the core function of our package. Create a new file called addition.R inside the R/ directory and add the following code:\n1 2 3 4 5 6 7 8 9 10 addition \u0026lt;- function(a, b) { if (length(a) \u0026gt; 1 || length(b) \u0026gt; 1) { stop(\u0026#34;I can\u0026#39;t accept a vector. Sorry.\u0026#34;) } if (is.numeric(a) == TRUE \u0026amp;\u0026amp; is.numeric(b) == TRUE) { a + b }else { paste0(as.character(a), as.character(b)) } } Of course, your package can include multiple complex functions. As a general recommendation, place each exported function in its own file. It’s fine to include auxiliary (internal) functions inside the same file as the main function that uses them.\nDocumenting the Functions Documentation is a crucial aspect of package development, and with devtools, you can easily manage it using roxygen2. This involves placing special comments at the top of each function to describe its purpose, usage, and arguments.\nLet’s document our addition function by adding the following above its definition in addition.R:\n#\u0026#39; Add two numeric values or paste two character values. #\u0026#39; #\u0026#39; This function takes two single values and adds them, #\u0026#39; if they are numeric, or pastes them together, otherwise. #\u0026#39; The function checks the length of each argument, and #\u0026#39; returns an error if any of the arguments has length #\u0026#39; greater than one. #\u0026#39; #\u0026#39; @usage addition(a, b) #\u0026#39; @keywords addition, pasting, sum. #\u0026#39; @param a A single value that is numeric, character or that #\u0026#39; can be coerced to character. #\u0026#39; @param b A single value that is numeric, character or that #\u0026#39; can be coerced to character. #\u0026#39; @return A numeric value with the sum of a and b, if both #\u0026#39; are numeric, or a string if both values can be coerced to #\u0026#39; to string. #\u0026#39; @examples #\u0026#39; # Adding numerc values #\u0026#39; addition(1, 6) #\u0026#39; # Pasting strings together #\u0026#39; addition(\u0026#34;nice \u0026#34;, \u0026#34;function\u0026#34;) #\u0026#39; @export Key Points About Documentation: #' denotes a documentation comment. The @export tag is essential to make the function available to users of the package. Functions without this tag are treated as internal. Tags like @param, @return, @keywords, and @examples provide structured details about the function. A Note on Imports If your package relies on external libraries, you should include the @import tag in the documentation, like this:\n#\u0026#39; @import data.table This ensures the package correctly imports external functionality.\nWith the core function implemented and documented, you’re well on your way to building a functional R package. Great work so far! 🎉\nBuilding the Documentation To build the documentation for your package, ensure your working directory is set to the package\u0026rsquo;s root directory (dummyaddition). If you haven’t closed your R session, you can simply use:\nsetwd(\u0026#34;dummyaddition\u0026#34;) If you’ve already closed the session, just start a new R session in the correct directory and reload the required libraries (devtools and rmarkdown) using library().\nNow, use the devtools::document() function, a convenient wrapper for the roxygen2::roxygenize() function, to generate the documentation. Run:\ndocument() This produces the following output:\nℹ Updating dummyaddition documentation ℹ Loading dummyaddition Writing NAMESPACE Writing addition.Rd Let\u0026rsquo;s break down what happens when you run this command:\nThe NAMESPACE file is updated automatically: it now includes the information needed to export the addition function. The man/ directory is created, if it doesn’t already exist. This folder contains documentation files for your exported functions, written in .Rd format. For example: addition.Rd: This file was generated from the special comments in the addition.R file. It contains documentation in a format recognized by R. Note: Do not modify this file directly, as it is automatically generated. At this point, you can now access the help for your function, even though the package isn’t installed yet. To do this, use a specific process:\n\u0026gt; ? + addition In this code:\n\u0026gt; represents the R prompt. + indicates a continuation line (a feature of Emacs). This means: write ? and when emacs offers you the continuation line, write addition.\nWhen you run this command, you’ll see a nicely formatted help page for your function, rendered as if the package were fully installed:\nℹ Rendering development documentation for \u0026#34;addition\u0026#34; addition package:dummyaddition R Documentation Add two numeric values or paste two character values. Description: This function takes two single values and adds them, if they are numeric, or pastes them together, otherwise. The function checks the length of each argument, and returns an error if any of the arguments has length greater than one. Usage: addition(a, b) Arguments: a: A single value that is numeric, character or that can be coerced to character. b: A single value that is numeric, character or that can be coerced to character. Value: A numeric value with the sum of a and b, if both are numeric, or a string if both values can be coerced to to string. Examples: # Adding numerc values addition(1, 6) # Pasting strings together addition(\u0026#34;nice \u0026#34;, \u0026#34;function\u0026#34;) This confirms that your documentation is functioning correctly and your package is well-structured.\nA Beautiful pdf Let\u0026rsquo;s generate a nicely formatted PDF for our package—just like the ones you see with well-established R packages.\nTo produce this PDF, you\u0026rsquo;ll need to use a shell (or Emacs’ Eshell). Open a shell using M-x shell or M-x eshell and navigate to the parent directory of your project (Documents in this example). Then, run the following command in the shell:\nR CMD Rd2pdf dummyaddition This will generate a PDF file named dummyaddition.pdf in the Documents folder.\n⚠ Important Note: You may need LaTeX and Pandoc installed on your system to successfully create the PDF. If they’re not already installed, search online for platform-specific installation instructions (and make yourself a coffee, installing them will require some time and patience).\nUpdate the README.md File The README.md file is the \u0026ldquo;face\u0026rdquo; of your package. It’s what people see first when they visit your repository (especially on GitHub), so it’s important to update it with relevant information.\nAt a minimum, your README.md file should include:\nWhat your package does: Provide a clear and simple explanation of what problem the package solves. How to install it: Include installation instructions. For example, you can add the following if your package is hosted on GitHub: devtools::install_github(\u0026#34;yourusername/dummyaddition\u0026#34;) Replace \u0026quot;yourusername\u0026quot; with your GitHub username and \u0026quot;dummyaddition\u0026quot; with your package name.\nPushing Your Updated Package to Github Once you\u0026rsquo;ve completed your code, documentation, and updates to your README.md, it’s time to push the changes to GitHub. Magit makes this process smooth and efficient.\nOpen the Magit buffer for your repository, typically titled magit: dummyaddition. If it\u0026rsquo;s not already open, you can activate it with the command:\nM-x magit-status Refresh the repository status by pressing g in the Magit buffer. You\u0026rsquo;ll see something like this:\nHead: main Initial commit Merge: origin/main Initial commit Push: origin/main Initial commit Untracked files (4) Unstaged changes (1) Recent commits You may expand specific sections (e.g., untracked files, unstaged changes, recent commits) by pressing TAB.\nStaging and Committing Changes Untracked files: When you expand the \u0026ldquo;Untracked files\u0026rdquo; section, you\u0026rsquo;ll see files like DESCRIPTION, NAMESPACE, and directories like man/ and R/. These are the new files we created during the development process.\nStage these changes by selecting the file or directory and pressing s (for stage). Staged files will now appear under the \u0026ldquo;Staged changes\u0026rdquo; section. Unstaged changes: You’ll notice that the README.md file appears here because it was modified (not newly created). Stage these changes with s as well. Magit may ask if you\u0026rsquo;d like to stage all changes—press y to confirm.\nOnce all changes are staged under the \u0026ldquo;Staged changes\u0026rdquo; section, commit them by pressing c (for commit). A menu will appear. Press c again to create the commit.\nWriting the Commit Message Once you start the commit process, a buffer will open for you to write your commit message. Commit messages should be meaningful and concise. For example:\nTitle: Clearly summarize the commit in one line. Body (optional): Add more details if necessary, especially if the changes are complex. Here’s an example commit message for our work:\nCode and Documentation Generated - Added the core function `addition`. - Created auto-generated documentation with roxygen2. - Updated the README.md file. After writing your commit message, save it and press C-c C-c to confirm and close the buffer.\nThis will update the Magit buffer, which may now say something like:\nUnmerged into origin/main (1) 56d6bd3 main Code and Documentation Generated This means your changes have been committed locally but not yet pushed to the GitHub repository.\nPushing to GitHub To push your changes to GitHub, press P (for push) in the Magit buffer. A menu will appear—press p to push your changes to origin/main.\nMagit may ask for your GitHub credentials (username and password) if you haven’t configured them for SSH or token-based authentication. Enter the required information, and after a moment, the Magit buffer will reflect that the changes have been pushed:\nRecent commits 56d6bd3 origin/main Code and Documentation Generated 4b1b6c8 Initial commit At this point, your changes are live on GitHub. You can verify them by visiting your repository on GitHub.\nShare Your Package Your journey isn’t complete until you share your work! While this package may solve a particular problem for you, it’s likely someone else out there (out of the 8 billion people on Earth 🌍) may face the same challenge in the future. Sharing your work could help them too.\nHere are some ways to share your package:\nPost about it on your social networks. Write a blog post about what it accomplishes. Share it on platforms such as Hacker News or Lobste.rs. Mention it in relevant forums or communities. Whichever method you choose, don’t forget to share your amazing work with the world!\n","permalink":"https://pavodive.github.io/posts/writing-r-package-emacs/","summary":"\u003cp\u003eThis article provides a step-by-step guide to writing R packages using Emacs\u0026rsquo; ESS (Emacs Speaks Statistics) mode. By the end, you\u0026rsquo;ll have created a simple package called \u003ccode\u003edummyaddition\u003c/code\u003e, which can perform the simple task of adding two numbers or paste two strings.\u003c/p\u003e","title":"Writing an R package with Emacs and ESS"}]