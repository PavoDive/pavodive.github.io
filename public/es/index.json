[{"content":"Este es un art√≠culo muy corto para compartir Swirly, una herramienta basada en Interfaz de L√≠nea de Comando para aprender python (o cualquier paquete de python) de manera interactiva.\nSwirl Swirl es un gran paquete originalmente escrito por Nick Carchedi y otros. Yo lo he usado incontables veces para aprender sobre paquetes de R, y para aprender R cuando estaba iniciando.\nSwirl te permite interactuar con el paquete, pero te gu√≠a a trav√©s de preguntas y la validaci√≥n de tus respuestas.\nYo extra√±aba tener en Python algo como Swirl, as√≠ que pens√© que desarrollar algo similar ser√≠a una buena idea.\nSwirly Swirly es una herramienta basada en CLI que se comporta de manera similar a Swirl. Tiene algunas lecciones predefinidas que pueden ser extendidas, creadas y modificadas, que gu√≠an al usuario a trav√©s de prguntas y la validaci√≥n de sus respuestas. Est√° completamente desarrollado en Python, y las lecciones son archivos YAML bastante sencillos.\nDale una mirada en el repo de Swirly, ¬°espero que sea de utilidad!\n","permalink":"https://pavodive.github.io/es/posts/swirly/","summary":"\u003cp\u003eEste es un art√≠culo muy corto para compartir \u003cstrong\u003eSwirly\u003c/strong\u003e, una herramienta basada en Interfaz de L√≠nea de Comando para aprender python (o cualquier paquete de python) de manera interactiva.\u003c/p\u003e","title":"Swirly: una herramienta basada en CLI para aprender python"},{"content":"Yo tengo la plantilla de un documento escrita como un archivo de Org. Yo tengo que editar algunos campos en ese archivo para poder generar diferentes versiones de ese documento para diferentes personas. Yo lo exporto como un archivo de texto para dar la sensaci√≥n de un documento escrito con un software antiguo e impreso con una impresora de matriz de puntos. Finalmente convierto el documento producido a PDF.\nEl Problema Cada tanto yo tengo que producir un documento que tiene que tener la apariencia de software antiguo y de haber sido impreso en una impresora de matriz de puntos. Ese documento tiene que tener algunos datos fijos y algunos datos din√°micos, que est√°n relacionados con el caso particular que en ese momento tenga a la mano. Sin ninguna automatizaci√≥n, el proceso es como este:\nAbrir el archivo de Org y editar los campos. Tratar de no olvidar editar ninguno de los campos. No que me haya pasado a mi, claro üôÑ. Exportar a texto con C-c C-e t a. Convertir el archivo de texto a pdf. Yo me preguntaba si podr√≠a hacer esto sin necesidad de abrir el archivo de Org, y especialmente sin olvidarme de alguno de los campos. Un comando, escribir las sustituciones ¬°y listo! Eso ser√≠a ideal.\nLa Soluci√≥n Esta soluci√≥n es uno de esos casos en los que el formato de texto plano es el Rey.\nLa soluci√≥n que pens√© es un script de bash que yo pueda ejecutar desde el terminal, y est√° pensada en cuatro partes:\nPedir al usuario los valores para los campos din√°micos utilizando read de bash. Sustituir los campos con los valores ingresados por el usuario utilizando sed. Exportar a un archivo temporal de texto utilizando emacs desde la l√≠nea de comando, y Convertir el archivo de texto a PDF utilizando cups. Preguntar al Usuario por los Campos Din√°micos #!/usr/bin/bash read -p \u0026#34;Por favor ingresa el a√±o: \u0026#34; year read -p \u0026#34;Por favor ingresa el nombre de la persona: \u0026#34; nombre_sujeto read -p \u0026#34;Por favor ingresa el texto para otro campo: \u0026#34; other_field # Algunos otros comandos read similares a los de arriba Sustituir Campos en el Archivo de Org El plan en este paso es sustituir las ocurrencias de \u0026ldquo;campo\u0026rdquo; en el archivo Org con los valores proporcionados por el usuario para \u0026ldquo;campo\u0026rdquo; ($campo), y hacerlo con sed. El paso despu√©s de este ser√° ejecutar el comando org-export en el texto producido por la sustituci√≥n. Aqu√≠ debemos tener en cuenta que Emacs no lee desde standard input, sino desde un archivo. As√≠ que necesitamos hacer las sustituciones con sed, exportarlas a un archivo temporal, y luego ejecutar el comando org export en ese archivo.\nMiremos las dos primeras partes:\n# Crear el archivo temporal tempfile=$(mktemp /tmp/docXXXXXXXXXXXXXXX.org) # Hacer las sustituciones con sed sed -e \u0026#34;s/year/$year/g\u0026#34; -e \u0026#34;s/nombre_sujeto/$nombre_sujeto/g\u0026#34; -e \u0026#34;s/other_field/$other_field/g\u0026#34; /full-path-to/template_document.org \u0026gt; \u0026#34;$tempfile\u0026#34; Algunos puntos interesantes aqu√≠:\nmktemp: Es muy √∫til para casos como este, en el que necesitamos una salida intermedia. ¬°Record√° borrarlo despu√©s de trabajar con √©l! El uso de las comillas dobles [\u0026quot;] en sed. Si us√°s comillas sencillas, vas a reemplazar cualquier ocurrencia de year con el texto literal $year y no con el texto que esper√°s, digamos 2025. Direccionamos los resultados de la sustituci√≥n al archivo temporal. Ejecutar el Comando Org Export en el Archivo Temporal Emacs nos ofrece una caracter√≠stica muy interesante, que es permitirnos ejecutar una funci√≥n sobre el archivo de entrada. Usaremos esa caracter√≠stica para ejecutar el comando de Org export sobre nuestro archivo temporal.\nemacs \u0026#34;$tempfile\u0026#34; --batch \\ -f org-ascii-export-to-ascii \\ --kill La opci√≥n -f es la que te permite definir la funci√≥n que quer√©s ejecutar (org-ascii-export-to-ascii en nuestro caso).\nLa opci√≥n --batch impide que Emacs tenga un display interactivo, y la opci√≥n --kill termina sin pedir confirmaci√≥n (pod√©s ver emacs --help o man emacs).\nAhora tenemos que hacer un poco de limpieza antes de nuestro paso siguiente (y final):\n# Crear el nombre del archivo de salida output_name=\u0026#34;document_${nombre_sujeto// /_}_$year.txt\u0026#34; # Renombrar el archivo producido por emacs con el nuevo nombre mv \u0026#34;${tempfile%.org}.txt\u0026#34; \u0026#34;./$output_name\u0026#34; # Borrar el archivo temporal producido por sed rm \u0026#34;$tempfile\u0026#34; La parte ${nombre_sujeto// /_} toma el valor en nombre_sujeto y reemplaza cualquier espacio con barras al piso [_]. Por tanto, el valor John Smith producir√° John_Smith. La parte ${tempfile%.org} se deshace de la parte .org, simplemente dejando el nombre del archivo (sin la extensi√≥n), adicionando luego .txt. Entonces digamos que tempfile era docAFGERWESF42424.org, el nombre del archivo que estamos renombrando es docAFGERWESF42424.txt, que es, de hecho, el archivo producido por el comando de Org export. No queremos mantener ese nombre feo, y por eso es que lo estamos renombrando a algo m√°s amigable. Finalmente borramos el archivo temporal para no dejar rastros ü•∑üèΩ. \u0026ldquo;Toma √∫nicamente fotos y deja √∫nicamente huellas.\u0026rdquo;\nConvertir el Archivo de Texto a PDF Como mencion√© antes, uno de los requerimientos de este proyecto era producir un documento que tuviera la apariencia de haber sido impreso en una impresora de matriz de puntos. Exportarlo directamente desde Org a PDF no hubiera cumplido ese requerimiento sin trabaje en plantillas de LaTeX.\nAs√≠ que la idea es que retengamos tanto como sea posible del formato y el aspecto del texto plano, pero poder exportarlo a un archivo PDF. Aunque hay varias opciones para hacerlo, cups es, en mi opini√≥n, la que produce el resultado que yo quer√≠a. Tambi√©n es un one-liner muy simple:\ncupsfilter \u0026#34;$output_name\u0026#34; \u0026gt; \u0026#34;${output_name%.txt}.pdf\u0026#34; Y ya estuvo, produje un documento en PDF con la apariencia de haber sido impreso en matriz de puntos, a partir de una plantilla en Org, sin siquiera haber abierto Emacs.\n","permalink":"https://pavodive.github.io/es/posts/bash_orgmode_certificate/","summary":"\u003cp\u003eYo tengo la plantilla de un documento escrita como un archivo de Org. Yo tengo que editar algunos campos en ese archivo para poder generar diferentes versiones de ese documento para diferentes personas. Yo lo exporto como un archivo de texto para dar la sensaci√≥n de un documento escrito con un software antiguo e impreso con una impresora de matriz de puntos. Finalmente convierto el documento producido a PDF.\u003c/p\u003e","title":"Un Script en Bash Para Editar y Exportar Desde una Plantilla en Org-mode"},{"content":"Recientemente me enfrent√© al siguiente problema: Ten√≠a un documento PDF creado uniendo varios otros documentos, varios de ellos de varias p√°ginas. Yo necesitaba mostrar los n√∫meros de p√°gina. ¬°LaTeX y pdftk al rescate!\nEl Problema Yo necesitaba generar un PDF uniendo varios documentos de diferentes fuentes, lo que result√≥ en un archivo de 57 p√°ginas. Despu√©s, necesitaba mostrar el n√∫mero de p√°gina como \u0026ldquo;Folio x/57\u0026rdquo;, donde \u0026ldquo;x\u0026rdquo; representaba el n√∫mero de la p√°gina actual.\nLa Soluci√≥n Mi plan para resolver este problema es de dos pasos:\nGenerar un nuevo PDF s√≥lo con los encabezados (\u0026ldquo;Folio x/57\u0026rdquo;) en cada p√°gina. Combinar este documento con el original, de tal forma que los encabezados quedaran sobrepuestos. Generando un PDF S√≥lo con N√∫meros de P√°gina Yo necesitaba crear 57 p√°ginas mayormente vac√≠as con \u0026ldquo;Folio x/57\u0026rdquo; en la esquina superior derecha. El n√∫mero de p√°gina deb√≠a actualizarse din√°micamente para cada p√°gina. Aunque hay varias formas de lograr esto, generar un PDF era la soluci√≥n que m√°s sentido ten√≠a.\nHay varias herramientas con las que se puede crear un documento as√≠, pero yo escog√≠ LaTeX porque ofrece la soluci√≥n m√°s simple y personalizable. La personalizaci√≥n es crucial, particularmente por el ajuste en los m√°rgenes, ya que en el documento original todos los m√°rgenes eran inconsistentes. Los paquetes geometry y fancyhdr de LaTeX me daban la flexibilidad que necesitaba.\nAqu√≠ est√° el c√≥digo que us√© en el archivo pagination.tex:\n\\documentclass[12pt]{article} \\usepackage[paperwidth=8.5in, paperheight=11in, top=0.7in, right=0.5in, left=0.5in, bottom=0.5in]{geometry} \\usepackage{fancyhdr} \\usepackage{pgffor} \\pagestyle{fancy} \\fancyhf{} \\rhead{Folio \\thepage/57} \\begin{document} \\setcounter{page}{1} \\foreach \\n in {1,...,57} { \\null\\vfill\\eject } \\end{document} Este script establece el tama√±o de papel y m√°rgenes del documento, define el formato del encabezado y finalmente genera las p√°ginas usando un loop, insertando un salto de p√°gina en cada iteraci√≥n.\nSi te est√°s preguntando por qu√© utilic√© \\vfill\\eject en lugar de \\newpage, te recomiendo que cheque√©s esta pregunta en tex.stackexchange.com (est√° en Ingl√©s, sorry üá¨üáß).\nDespu√©s de compilar el archivo de LaTeX, se obtiene pagination.pdf, un hermoso documento en blanco con los n√∫meros de p√°gina presentados en los lugares apropiados.\nCombinando el Nuevo Documento con el PDF Original El paso final era combinar los dos PDFs. No s√≥lo unirlos, sino realmente sobreponerlos, de tal forma que los encabezados de mi nuevo documento aparecieran sobre el contenido original.\nPara esto utilic√© pdftk un fant√°stica herramienta para manipular PDFs. La siguiente l√≠nea de c√≥digo hizo la magia:\npdftk original.pdf multistamp pagination.pdf output numbered.pdf original.pdf es el documento principal. pagination.pdf conten√≠a los encabezados. La opci√≥n multistamp le dice a pdftk que sobreponga cada p√°gina en pagination.pdf sobre la p√°gina correspondiente en original.pdf. La opci√≥n output genera el nuevo PDF numerado como numbered.pdf. Y ¬°ya est√°! Logr√© resolver un problema tedioso con s√≥lo unas pocas l√≠neas de c√≥digo. Ahora estoy compartiendo esto con vos ‚Äìy con mi yo futuro üòâ.\n","permalink":"https://pavodive.github.io/es/posts/superimpose_page_number_pdf/","summary":"\u003cp\u003eRecientemente me enfrent√© al siguiente problema: Ten√≠a un documento PDF creado uniendo varios otros documentos, varios de ellos de varias p√°ginas. Yo necesitaba mostrar los n√∫meros de p√°gina. ¬°\u003cstrong\u003eLaTeX\u003c/strong\u003e y \u003cstrong\u003epdftk\u003c/strong\u003e al rescate!\u003c/p\u003e","title":"A√±adiendo N√∫meros de P√°gina a Documento PDF"},{"content":"En este art√≠culo quiero mostrarles como configur√© mu4e para gestionar mis cuentas de Gmail en Emacs.\nUna buena parte de mi tiempo frente a un computador es utilizada en Emacs. De hecho, este preciso blog est√° siendo escrito en Emacs. Mi agenda est√° en Emacs, programo en Emacs, escribo en Emacs e incluso leo libros en Emacs. As√≠ que lo m√°s natural es que yo quiera getsionar mi email en Emacs tambi√©n.\nYo utilizo m√∫ltiples cuentas de Gmail, para las cuales necesitaba configurar un lector de email dentro de Emacs.\nAlternativas de Gesti√≥n de Email en Emacs Hay dos alternativas principales para leer email en Emacs: Gnus y mu4e. Como la mayor√≠a de las cosas en Emacs, cu√°l escoger depende de las preferencias personales de cada quien ‚Äìambas son poderosas, altamente personalizables y ofrecen numerosas caracter√≠sticas y funcionalidades.\nYo intent√© usar Gnus hace alg√∫n tiempo. Es un lector de mensajes bastante poderoso, no s√≥lo para email, y permite una personalizaci√≥n enorme. Uno de sus caracter√≠sticas m√°s celebradas es su capacidad de asignar puntajes a los mensajes, ayud√°ndole al usuario a priorizar lo m√°s importante.\nSin embargo, para ser honesto, nunca pude desarrollar un buen flujo de trabajo con Gnus. Tal vez tiene demasiadas funcionalidades para mis necesidades. Yo no recibo una gran cantidad de emails, ya que de manera consistente he recortado los mensajes innnecesarios ‚Äìnada de suscripciones, ni newsletters y la mayor√≠a de mis amigos y colegas saben que prefiero una llamada telef√≥nica a un email.\nAs√≠ que intent√© con la alternativa: mu4e. En cierta forma, mu4e es m√°s simple que Gnus. No es tan multi-prop√≥sito, pero de todas formas ofrece muchas caracter√≠sticas y personalizaci√≥n.\nmu4e Cuando investigu√© mu4e por primera vez, me pareci√≥ un poco complicado de instalar y configurar, especialmente para Gmail. As√≠ que segu√≠ leyendo y buscando con un poco de escepticismo. mu4e fue desarrollada y es mantenida por Dirk-Jan Binnema, y pod√©s chequear su p√°gina oficial aqu√≠.\nLa documentaci√≥n es buena, pero no es exactamente amistosa con los novatos.\nDurante mi investigaci√≥n, encontr√© una fuente particularmente √∫til para instalar y configurar mu4e con Gmail: este hilo de Reddit. Es bastante completo, pero fue escrito en 2019, as√≠ que tuve algunas dificultades con los varios cambios que Google ha introducido en Gmail desde ese entonces.\nLa mayor parte de lo que estoy compartiendo en este art√≠culo es un re-make de lo que escribi√≥ el usuario skizmi.\nInstalando mu4e y sus Dependencias Es necesario instalar isync junto con algunas librer√≠as requeridas por mu4e. Ya que yo estoy usando una distribuci√≥n de Linux basada en Debian, es simplemente ejecutar:\nsudo apt update sudo apt install isync -f sudo apt install libgmime-3.0-dev libxapian-dev Esto instala isync y las librer√≠as requeridas por mu4e.\nAhora a instalar mu (yo uso un directorio apps para guardar instalaciones similares a esta):\nmkdir -p apps/mu4e git clone https://github.com/djcb/mu.git cd mu ./autogen.sh \u0026amp;\u0026amp; make sudo make install Esto deber√° haber instalado mu en tu sistema. Si encontr√°s algunos errores, le√© cuidadosamente los mensajes ‚Äìlo m√°s probable es que te hagan falta algunas dependencias (librer√≠as, seguramente) que pueden ser instaladas con:\nsudo apt install [librer√≠a-faltante] Obteniendo tu Password Espec√≠fico para Aplicaci√≥n de Google Ahora necesitamos un password o contrase√±a espec√≠fica para aplicaci√≥n para tu cuenta o cuentas de Google. Google te sugiere iniciar sesi√≥n v√≠a OAuth, pero de todas formas tambi√©n permiten utilizar contrase√±as espec√≠ficas para aplicaci√≥n, para casos como este. Cheque√° esta p√°gina de soporte para m√°s detalles.\nPara generar una contrase√±a espec√≠fica para aplicaci√≥n:\nVisit√° este enlace.\nIngres√° tus credenciales (es posible que teng√°s que utilizar tu autenticaci√≥n en dos pasos, si est√° habilitada).\nEspecific√° un nombre para tu aplicaci√≥n (escog√© un nombre que le haga sentido a tu vos del futuro).\nGoogle te dar√° un password de 16 caracteres formateado como este:\naaaa bbbb cccc dddd Desde esa misma p√°gina tambi√©n pod√©s eliminar contrase√±as espec√≠ficas de aplicaci√≥n que ya no us√©s o que sean obsoletas. Es una buena pr√°ctica de seguridad eliminar cualquiera que ya no sea necesaria.\nGuard√° esta contrase√±a, la vamos a usar en los pasos siguientes.\nCreando los Archivos de Configuraci√≥n mbsync Necesitamos dos archivos:\n.mbsyncrc .mbsyncpass (uno por cada cuenta de Gmail) .mbsyncpass-test.gpg Yo recomiendo guardar este archivo en ~/.emacs.d/mu4e/. En Emacs, cre√° el archivo con:\nC-x C-f ~/.emacs.d/mu4e/.mbsyncpass-test.gpg (Por supuesto, reemplaz√° \u0026ldquo;test\u0026rdquo; con el nombre real de tu cuenta). Peg√° tu contrase√±a de 16 caracteres en el archivo:\naaaa bbbb cccc dddd Cuando guard√©s (C-x C-s), Emacs te va a pedir seleccionar recipientes para la encriptaci√≥n (select recipients for encryption). Confirm√° presionando \u0026ldquo;OK\u0026rdquo;, registr√° una contrase√±a (y confirm√°la), y tu contrase√±a espec√≠fica de aplicaci√≥n para Gmail estar√° encriptada y segura.\nRepet√≠ esto para cada cuenta de Gmail que est√©s configurando.\n.mbsyncrc Guard√° este archivo en ~/.emacs.d/mu4e/. Este archivo va a contener los detalles de la cuenta, los directorios de correo y otras configuraciones de Gmail.\nNota: Cheque√° si el folder de reciclaje de tu Gmail se llama \u0026ldquo;Trash\u0026rdquo; o \u0026ldquo;Bin\u0026rdquo;, esto es crucial para la correcta operaci√≥n.\nLos contenidos del archivo son:\n# Informaci√≥n de la Cuenta IMAPAccount test-gmail # Direcci√≥n a la que se conectar√° Host imap.gmail.com User test@gmail.com PassCmd \u0026#34;gpg -q --for-your-eyes-only --no-tty -d ~/.emacs.d/mu4e/.mbsyncpass-test.gpg\u0026#34; AuthMechs LOGIN SSLType IMAPS SSLVersions TLSv1.2 CertificateFile /etc/ssl/certs/ca-certificates.crt # Almacenamiento remoto (utilizar la cuenta IMAP especificada arriba) IMAPStore test-gmail-remote Account test-gmail # Almacenamiento local (crear directorios con mkdir -p ~/Maildir/test-gmail) MaildirStore test-gmail-local Path ~/Maildir/test-gmail/ Inbox ~/Maildir/test-gmail/INBOX # Las conexiones especifican enlaces entre lar carpetas remotas y locales # # Las conexiones son especificadas utilizando patrones, los cuales hacen # match con las carpetas de mail remoto. Algunos patrones comunmente usados: # # 1 \u0026#34;*\u0026#34; para hacer match con todo. # 2 \u0026#34;!DIR\u0026#34; para excluir \u0026#34;DIR\u0026#34; # 3 \u0026#34;DIR\u0026#34; para hacer match con DIR Channel test-gmail-inbox Far :test-gmail-remote: Near :test-gmail-local: Patterns \u0026#34;INBOX\u0026#34; Create Both Expunge Both SyncState * Channel test-gmail-trash Far :test-gmail-remote:\u0026#34;[Gmail]/Trash\u0026#34; Near :test-gmail-local:\u0026#34;[test].Trash\u0026#34; Create Both Expunge Both SyncState * Channel test-gmail-sent Far :test-gmail-remote:\u0026#34;[Gmail]/Sent Mail\u0026#34; Near :test-gmail-local:\u0026#34;[test].Sent Mail\u0026#34; Create Both Expunge Both SyncState * Channel test-gmail-all Far :test-gmail-remote:\u0026#34;[Gmail]/All Mail\u0026#34; Near :test-gmail-local:\u0026#34;[test].All Mail\u0026#34; Create Both Expunge Both SyncState * Channel test-gmail-starred Far :test-gmail-remote:\u0026#34;[Gmail]/Starred\u0026#34; Near :test-gmail-local:\u0026#34;[test].Starred\u0026#34; Create Both Expunge Both SyncState * # Los grupos juntan canales, as√≠ que podemos invocar # mbsync en un grupo para sincronizar todos los canales # # Por ejemplo: \u0026#34;mbsync gmail\u0026#34; trae el correo de # \u0026#34;gmail-inbox\u0026#34;, \u0026#34;gmail-sent\u0026#34;, y \u0026#34;gmail-trash\u0026#34; # Group test-gmail Channel test-gmail-inbox Channel test-gmail-sent Channel test-gmail-trash Channel test-gmail-all Channel test-gmail-starred Si el reciclaje de tu Gmail se llama \u0026ldquo;Bin\u0026rdquo;, reemplaz√°:\nChannel test-gmail-trash Far :test-gmail-remote:\u0026#34;[Gmail]/Trash\u0026#34; Near :test-gmail-local:\u0026#34;[test].Trash\u0026#34; con:\nChannel test-gmail-trash Far :test-gmail-remote:\u0026#34;[Gmail]/Bin\u0026#34; Near :test-gmail-local:\u0026#34;[test].Bin\u0026#34; .authinfo.gpg Si no ten√©s todav√≠a un archivo .authinfo.gpg, cre√°lo en ~/.authinfo.gpg. A√±ad√≠le:\nmachine smtp.gmail.com login test password \u0026#34;aaaa bbbb cccc dddd\u0026#34; port 465 machine imap.gmail.com login test password \u0026#34;aaaa bbbb cccc dddd\u0026#34; port 993 Reemplaz√° \u0026ldquo;test\u0026rdquo; con tu nombre real de usuario e insert√° tu contrase√±a espec√≠fica de aplicaci√≥n.\nPara varias cuentas, ingres√° los datos correspondientes a cada una.\nCreando los Directorios de Maildir y Ejecutando mbsync Luego, cre√° los directorios en Maildir y corr√© mbsync:\nmkdir -p ~/Maildir/test-gmail (Asegur√°te que el nombre corresponde con el campo IMAPAccount en el archivo .mbsyncrc). Repet√≠ para cada cuenta.\nLuego ejecut√°:\nmbsync -c .emacs.d/mu4e/.mbsyncrc -Dmn test-gmail Indexando Maildir Ahora, vamos a indexar tu correo. Esto puedo tomar alg√∫n tiempo, dependiente del n√∫mero y tama√±o de tus mensajes guardados.\nmu init --maildir=Maildir mu init --my-address=test@gmail.com mu index Para m√∫ltiples cuentas, list√°las todas en una s√≥la l√≠nea:\nmu init --my-address=test@gmail.com --my-address=other@gmail.com Adicionando los Ajustes de mu4e a .emacs Finalmente, adicion√° los ajustes necesarios de mu4e a tu .emacs (o cualquier otro archivo de inicializaci√≥n que utilic√©s).\n(require \u0026#39;org-mime) (add-to-list \u0026#39;load-path \u0026#34;/usr/local/share/emacs/site-lisp/mu4e/\u0026#34;) (require \u0026#39;mu4e) (setq mu4e-maildir (expand-file-name \u0026#34;~/Maildir\u0026#34;)) ; obtener el correo (setq mu4e-get-mail-command \u0026#34;mbsync -c ~/.emacs.d/mu4e/.mbsyncrc -a\u0026#34; mu4e-view-prefer-html t mu4e-update-interval 180 mu4e-headers-auto-update t mu4e-compose-signature-auto-include nil mu4e-compose-format-flowed t) ;; Para ver los mensajes en el navegador, sin signin, solo mail html (add-to-list \u0026#39;mu4e-view-actions \u0026#39;(\u0026#34;ViewInBrowser\u0026#34; . mu4e-action-view-in-browser) t) ;; Habilitar im√°genes inline (setq mu4e-view-show-images t) ;; usar imagemagick si est√° disponible (when (fboundp \u0026#39;imagemagick-register-types) (imagemagick-register-types)) ;; Cada nuevo mensaje obteiene su propio frame! (setq mu4e-compose-in-new-frame t) ;; No guardar mensajes a \u0026#34;enviados\u0026#34;, IMaP se encarga de esto. ;;(setq mu4e-sent-messages-behavior \u0026#39;sent) (add-hook \u0026#39;mu4e-view-mode-hook #\u0026#39;visual-line-mode) ;; \u0026lt;tab\u0026gt; para navegar a los links, \u0026lt;RET\u0026gt; para abrirlos en el navegador (add-hook \u0026#39;mu4e-view-mode-hook (lambda() ;; Tratar de emular algunos de los key-bindings de eww (local-set-key (kbd \u0026#34;\u0026lt;RET\u0026gt;\u0026#34;) \u0026#39;mu4e~view-browse-url-from-binding) (local-set-key (kbd \u0026#34;\u0026lt;tab\u0026gt;\u0026#34;) \u0026#39;shr-next-link) (local-set-key (kbd \u0026#34;\u0026lt;backtab\u0026gt;\u0026#34;) \u0026#39;shr-previous-link))) ;; copiado de https://www.reddit.com/r/emacs/comments/bfsck6/mu4e_for_dummies/elgoumx (add-hook \u0026#39;mu4e-headers-mode-hook (defun my/mu4e-change-headers () (interactive) (setq mu4e-headers-fields `((:human-date . 25) ;; alternatively, use :date (:flags . 6) (:from . 22) (:thread-subject . ,(- (window-body-width) 70)) ;; alternatively, use :subject (:size . 7))))) ;; Corrector de ortograf√≠a (add-hook \u0026#39;mu4e-compose-mode-hook (defun my-do-compose-stuff () \u0026#34;My settings for message composition.\u0026#34; (visual-line-mode) ; (org-mu4e-compose-org-mode) (use-hard-newlines -1) (flyspell-mode))) (require \u0026#39;smtpmail) ;;renombrar archivos al mover ;; es requerido por mbsync (setq mu4e-change-filenames-when-moving t) ;;set up queue for offline email ;;use mu mkdir ~/Maildir/acc/queue to set up first (setq smtpmail-queue-mail nil) ;; start in normal mode ;; copied from https://emacs.stackexchange.com/questions/46257/sending-email-fails-with-process-smtpmail-not-running (setq smtpmail-stream-type \u0026#39;ssl) ;; del manual (setq mu4e-attachment-dir \u0026#34;~/Downloads\u0026#34;) (setq message-kill-buffer-on-exit t) (setq mu4e-compose-dont-reply-to-self t) (require \u0026#39;mu4e-org) ;; Convertir org mode a HTML autom√°ticamente (setq org-mu4e-convert-to-html t) ;; de la configuraci√≥n de vxlabs ;; mostrar la direcci√≥n completa en la vista de mensaje (en lugar de s√≥lo los nombres) ;; toggle per name with M-RET (setq mu4e-view-show-addresses \u0026#39;t) ;; no confirmar al salir (setq mu4e-confirm-quit nil) ;; mu4e-context (setq mu4e-context-policy \u0026#39;pick-first) (setq mu4e-compose-context-policy \u0026#39;always-ask) (setq mu4e-contexts (list (make-mu4e-context :name \u0026#34;gmail\u0026#34; ;;for test-gmail :enter-func (lambda () (mu4e-message \u0026#34;Entering context gmail\u0026#34;)) :leave-func (lambda () (mu4e-message \u0026#34;Leaving context gmail\u0026#34;)) :match-func (lambda (msg) (when msg (mu4e-message-contact-field-matches msg \u0026#39;(:from :to :cc :bcc) \u0026#34;test@gmail.com\u0026#34;))) :vars \u0026#39;((user-mail-address . \u0026#34;test@gmail.com\u0026#34;) (user-full-name . \u0026#34;Full Name Here\u0026#34;) (mu4e-sent-folder . \u0026#34;/test-gmail/[test].Sent\u0026#34;) (mu4e-drafts-folder . \u0026#34;/test-gmail/[test].drafts\u0026#34;) (mu4e-trash-folder . \u0026#34;/test-gmail/[test].Trash\u0026#34;) (mu4e-compose-signature . (concat \u0026#34;My Name Here\\n\u0026#34;)) (mu4e-compose-format-flowed . t) (smtpmail-queue-dir . \u0026#34;~/Maildir/test-gmail/queue/cur\u0026#34;) (message-send-mail-function . smtpmail-send-it) (smtpmail-smtp-user . \u0026#34;test\u0026#34;) (smtpmail-starttls-credentials . ((\u0026#34;smtp.gmail.com\u0026#34; 465 nil nil))) (smtpmail-auth-credentials . (expand-file-name \u0026#34;~/.authinfo.gpg\u0026#34;)) (smtpmail-default-smtp-server . \u0026#34;smtp.gmail.com\u0026#34;) (smtpmail-smtp-server . \u0026#34;smtp.gmail.com\u0026#34;) (smtpmail-smtp-service . 465) (smtpmail-debug-info . t) (smtpmail-debug-verbose . t) (mu4e-maildir-shortcuts . ( (\u0026#34;/test-gmail/INBOX\u0026#34; . ?i) (\u0026#34;/test-gmail/[test].Sent Mail\u0026#34; . ?s) (\u0026#34;/test-gmail/[test].Bin\u0026#34; . ?t) (\u0026#34;/test-gmail/[test].All Mail\u0026#34; . ?a) (\u0026#34;/test-gmail/[test].Starred\u0026#34; . ?r) (\u0026#34;/test-gmail/[test].drafts\u0026#34; . ?d) )))))) Si est√°s configurando varias cuentas, adicion√°las a la lista mu4e-contexts, asegur√°ndote que cada una tiene un :name √∫nico.\nDe nuevo, configur√° el folder de reciclaje o papelera de la manera correcta (ya sea \u0026ldquo;Trash\u0026rdquo; o \u0026ldquo;Bin\u0026rdquo;).\nDisfrut√° mu4e El paso final: reiniciar Emacs y ejecutar mu4e:\nM-x mu4e Deber√≠as ver el men√∫ de mu4e. Desde all√≠, es relativamente simple. Para explorar los comandos disponibles, presion√° h dentro del buffer mu4e-main.\nFeliz email en Emacs! üöÄ\n","permalink":"https://pavodive.github.io/es/posts/configuring-mu4e-gmail/","summary":"\u003cp\u003eEn este art√≠culo quiero mostrarles como configur√© \u003cstrong\u003emu4e\u003c/strong\u003e para gestionar mis cuentas de Gmail en Emacs.\u003c/p\u003e","title":"Configurando mu4e para cuentas de gmail en emacs"},{"content":"Yo trabajo con muchos archivos Rmarkdown estructurados dentro de una jerarqu√≠a de directorios. Yo necesitaba renderizar esos archivos a PDF y luego utilizar Ghostscript para unirlos. Este art√≠culo explica dos peque√±os scripts de shell que us√© para la tarea.\nEl Problema Para el proyecto de un cliente yo necesito producir varios documentos PDF que consisten de:\nUna carta de presentaci√≥n (cover) Un reporte Por razones que no son relevantes para este art√≠culo, la carta de presentaci√≥n y el reporte utilizan plantillas de renderizado diferentes, as√≠ que no se pueden unir antes de renderizar. Los dos documentos son escritos en Rmarkdown (archivos .Rmd) que renderizan directamente a PDF.\nCada proyecto involucra cientos de pares cover-reporte, lo que convierte en impr√°ctico el proceso de renderizarlos manualmente. La estructura de directorios sigue este patr√≥n:\nüìÇ--client-root üìÇ--project-1 | üìÇ--report | | |--cover.Rmd | | |--report_project-1.Rmd | üìÇ--data üìÇ--project-2 | üìÇ--report | | |--cover.Rmd | | |--report_project-2.Rmd | üìÇ--data Por supuesto, en la realidad mis directorios no se llaman \u0026ldquo;project-n\u0026rdquo;; ellos tienen nombres reales que tienen sentido.\nYo nunca, nunca, uso espacios o caracteres no-ASCII en los nombres de ning√∫n directorio o nombre de archivo.\nLa Soluci√≥n Yo us√© un comando de una sola l√≠nea para renderizar todos los Rmd a PDF:\nfind client-root -type f -name \u0026#34;*.Rmd\u0026#34; | xargs -I{} Rscript -e \u0026#39;rmarkdown::render(\u0026#34;{}\u0026#34;)\u0026#39; Como Funciona find client-root -type f -name \u0026quot;*.Rmd\u0026quot; es un comando est√°ndar de find que:\nBusca dentro de client-root Por archivos (-type f) (la f es de file: archivo) Cuyos nombres terminen en .Rmd (-name \u0026quot;*.Rmd\u0026quot;) El resultado que produce es una lista de paths, por ejemplo, ./client-root/project-1/report/cover.Rmd. El | (pipe) env√≠a esta lista al siguiente comando.\nxargs -I{} Rscript -e 'rmarkdown::render(\u0026quot;{}\u0026quot;)' procesa cada archivo:\nxargs construye y ejecuta comandos para cada archivo encontrado. -I{} le dice a xargs que reemplace {} con cada nombre de archivo. Rscript -e ejecuta una expresi√≥n de R (-e significa ejecuci√≥n en l√≠nea). rmarkdown::render(\u0026quot;{}\u0026quot;) llama la funci√≥n de R que procesa cada archivo din√°micamente, reemplazando {} con el nombre de cada archivo. Despu√©s de correr esto, la estructura de directorios ahora contiene los PDFs correspondientes:\nüìÇ--client-root üìÇ--project-1 | üìÇ--report | | |--cover.Rmd | | |--cover.pdf | | |--report_project-1.Rmd | | L--report_project-1.pdf | üìÇ--data üìÇ--project-2 | üìÇ--report | | |--cover.Rmd | | |--cover.pdf | | |--report_project-2.Rmd | | L--report_project-2.pdf | üìÇ--data Un Nuevo Problema Ahora necesito combinar la carta de presentaci√≥n (cover) en PDF con el reporte en PDF para cada proyecto.\nPara un √∫nico proyecto, podr√≠a haberlo hecho manualmente utilizando Ghostscript (gs):\ngs -dBATCH -dNOPAUSE -sDEVICE=pdfwrite \\ -sOutputFile=merged_report_project-1.pdf \\ cover.pdf report_project-1.pdf Pero como dije, tengo muchos proyectos, as√≠ que necesitaba automatizar el proceso utilizando Bash.\nAdicionalmente, ten√≠a que seguir esta convenci√≥n para nombrar los archivos resultantes:\nEl nombre de archivo resultante debe comenzar con \u0026quot;merged_\u0026quot;, seguido por el nombre de archivo del reporte, por ejemplo:\nmerged_report_project-1.pdf Uniendo los PDFs Para unir los PDFs, my plan era:\nEncontrar todos los directorios report en todos los proyectos. Extraer las rutas para los archivos PDF de la carta de presentaci√≥n y el reporte. Construir din√°micamente el nombre de archivo resultado. Utilizar Ghostscript para unir los archivos. Aqu√≠ est√° el script:\nfind client-root -type d -name \u0026#34;report\u0026#34; | \\ while read -r dir; do cover_pdf=\u0026#34;$dir/cover.pdf\u0026#34; report_pdf=(\u0026#34;$dir/report_\u0026#34;*.pdf) output_pdf=\u0026#34;$dir/merged_$(basename \u0026#34;${report_pdf[0]}\u0026#34;)\u0026#34; gs -dBATCH -dNOPAUSE -sDEVICE=pdfwrite \\ -sOutputFile=\u0026#34;$output_pdf\u0026#34; \\ \u0026#34;$cover_pdf\u0026#34; \\ \u0026#34;${report_pdf[0]}\u0026#34; done Entendiendo el Script Encontrando los directorios\nfind client-root -type d -name \u0026#34;report\u0026#34; Busca bajo client-root Encuentra solamente directorios (-type d) llamados \u0026quot;report\u0026quot;. Los resultados son pasados (piped) al siguiente comando. Procesando cada directorio\nwhile read -r dir; do ... done Itera sobre cada directorio encontrado. read -r dir asigna cada ruta de directorio a dir. La bandera -r asegura que la ruta es le√≠da literalmente, evitando secuencias de escape no previstas. Definiendo las Rutas de Archivo\ncover_pdf=\u0026#34;$dir/cover.pdf\u0026#34; Construye la ruta para el PDF de la carta de presentaci√≥n. Las comillas aseguran el correcto manejo de los espacios en los nombres de directorio, si existen (a√∫n a pesar de que yo los evito). report_pdf=(\u0026#34;$dir/report_\u0026#34;*.pdf) Utiliza un comod√≠n (report_*.pdf) para encontrar el archivo de reporte. Los parentesis crean un array, permitiendo que hayan m√∫ltiples resultados (aunque s√≥lo esperamos uno). Construyendo el Nombre Combinado de Archivo\noutput_pdf=\u0026#34;$dir/merged_$(basename \u0026#34;${report_pdf[0]}\u0026#34;)\u0026#34; ${report_pdf[0]} selecciona el primer resultado (y esperamos que el √∫nico). basename elimina al ruta del directorio, manteniendo √∫nicamente el nombre de archivo. $( ... ) ejecuta una sustituci√≥n de comando, insertando el resultado din√°micamente. \u0026quot;merged_\u0026quot; es antepuesto para crear el nombre final del archivo combinado. Uniendo con Ghostscript\ngs -dBATCH -dNOPAUSE -sDEVICE=pdfwrite \\ -sOutputFile=\u0026#34;$output_pdf\u0026#34; \\ \u0026#34;$cover_pdf\u0026#34; \\ \u0026#34;${report_pdf[0]}\u0026#34; Une los PDFs de la carta de presentaci√≥n y del reporte, guard√°ndo el resultado como merged_report_project-N.pdf. Si ten√©s curiosidad sobre las banderas de gs, cheque√°las con man gs. ¬°Y eso es todo! Ahora todos mis archivos merged_report_project-x.pdf se generan autom√°ticamente.\nBash me ha ahorrado un mont√≥n de tiempo, que he utilizado para escribir este art√≠culo. ¬°Ahora de nuevo a trabajar! üòá\n","permalink":"https://pavodive.github.io/es/posts/bash_scripts_rmarkdown/","summary":"\u003cp\u003eYo trabajo con muchos archivos Rmarkdown estructurados dentro de una jerarqu√≠a de directorios. Yo necesitaba renderizar esos archivos a PDF y luego utilizar Ghostscript para unirlos. Este art√≠culo explica dos peque√±os scripts de shell que us√© para la tarea.\u003c/p\u003e","title":"Automatizando el Renderizado de Rmarkdown y Uniendo PDFs con Bash"},{"content":"As√≠ de f√°cil fue configurar elfeed en emacs para tener un compendio de todos los blogs y sitios que me gustan de emacs. En este art√≠culo comparto la forma (y algunos RSS) de configurar el paquete elfeed para tener los RSS de los blogs y canales de video que me gusta leer o ver. Esto es importante para mi, porque siempre gasto mucho tiempo filtrando cosas que no me interesa ver en los foros como lemmy.ml o reddit.com. Es tambi√©n una forma de evitar los anuncios y poder ir directamente al contenido.\nElfeed Elfeed es un paquete para emacs que sirve exactamente para eso: agregar feeds. La mayor√≠a de sitios tienen feeds en los que \u0026ldquo;anuncian\u0026rdquo; los nuevos art√≠culos que se han a√±adido. Esa informaci√≥n es procesada por elfeed y presentada como una simple tabla ordenada por fecha, en la que pod√©s ver los t√≠tulos de las p√°ginas a√±adidas, y algunos otros detalles.\nPara instalar elfeed en tu emacs, simplemente (si ten√©s melpa o elpa) hac√©s M-x package-install RET elfeed RET, y luego a√±ad√≠ esto a tu .emacs:\n(global-set-key (kbd \u0026#34;C-x w\u0026#34;) \u0026#39;elfeed) (Pod√©s usar C-x w u otra de tu preferencia, si ten√©s ocupada la combinaci√≥n C-x w).\nAhora simplemente invocando M-x elfeed o C-x w vas a tener una impresionante pantalla vac√≠a, porque a√∫n no a√±adimos los feeds üìù.\nA√±adiendo los Feeds Para a√±adir los feeds a elfeed, simplemente se utiliza c√≥digo semejante a:\n(setq elfeed-feeds \u0026#39;((\u0026#34;https://url.del.feed/atom.xml\u0026#34; nombre-de-tag))) nombre-del-tag es el nombre (o nombres) que le quer√°s dar a la etiqueta de esa fuente espe√≠fica. Mir√° estos ejemplos:\n(setq elfeed-feeds \u0026#39;((\u0026#34;https://planet.emacslife.com/atom.xml\u0026#34; emacs) (\u0026#34;https://xenodium.com/rss\u0026#34; emacs) (\u0026#34;https://lemmy.ml/feeds/c/emacs.xml?sort=Active\u0026#34; emacs) (\u0026#34;https://programming.dev/feeds/c/django.xml?sort=Active\u0026#34; django))) Disfrutando el Resultado Despu√©s de haber cargado estos feeds, ahora podemos abrir nuevamente elfeed y recargar con G (elfeed-search-fetch).\nDebe resultar algo similar a esto:\nCaptura de pantalla de elfeed\nAhora pod√©s navegar, hacer b√∫squedas, y por supuesto leer los art√≠culos que despierten tu inter√©s.\nLa navegaci√≥n en esta pantalla es posible con los atajos que tengas definidos para siguiente y anterior l√≠nea (C-n y C-p en emacs vainilla) con n (next-line) y p (previous-line). Es posible marcar una entrada que no te interesa leer como \u0026ldquo;le√≠da\u0026rdquo; con r (elfeed-search-untag-all-unread), y obviamente entrar a leerla con RET (elfeed-search-show-entry).\nLa funcionalidad de b√∫squeda es posible con s (elfeed-search-live-filter). Es una b√∫squeda incremental, y es posible filtrar por fechas y por etiquetas:\nEscribir \u0026ldquo;lis\u0026rdquo; mostrar√° resultados que contengan: La palabra \u0026ldquo;list\u0026rdquo;, La palabra \u0026ldquo;lisp\u0026rdquo;, La palabra \u0026ldquo;elisp\u0026rdquo;, La palabra \u0026ldquo;playlist\u0026rdquo;. B√∫squeda en elfeed\nHay otros varios atajos de teclado, asegur√°te de revisarlos con C-h m o simplemente h (describe-mode).\nLeyendo una entrada Para leer una entrada, simplemente la seleccion√°s, y RET. Listo. En la mayor√≠a de los casos la entrada va a estar ah√≠, visible en emacs y la pod√©s leer. En otros casos es posible que prefir√°s verla en el browser que ten√©s instalado. Para hacer eso, simplemente b (elfeed-search-browse-url) abre la entrada en tu navegador.\nViendo una entrada en emacs\nAs√≠ se ve el post en el navegador:\nViendo una entrada en el navegador firefox\nUn comportamiento interesante de b es que abre la entrada en una pesta√±a del navegador y simult√°neamente avanza a la siguiente l√≠nea. Cuando termin√©s de hacer b en varias de las entradas que te interesaron, vas a tener varias pesta√±as abiertas en el navegador.\nAunque la verdad, yo prefiero leer las entradas en el propio emacs üòâ.\nTe animo a explorar esta sencilla forma de mantenerte al tanto de las cosas que te interesan, sin exponerte al contenido que no te interesa y no quer√©s. Para saber m√°s sobre elfeed, por favor visti√° su p√°gina de github.\n","permalink":"https://pavodive.github.io/es/posts/emacs_rss_elfeed/","summary":"\u003cp\u003eAs√≠ de f√°cil fue configurar elfeed en emacs para tener un compendio de todos los blogs y sitios que me gustan de emacs.\nEn este art√≠culo comparto la forma (y algunos RSS) de configurar el paquete elfeed para tener los RSS de los blogs y canales de video que me gusta leer o ver. Esto es importante para mi, porque siempre gasto mucho tiempo filtrando cosas que no me interesa ver en los foros como \u003ca href=\"https://lemmy.ml\"\u003elemmy.ml\u003c/a\u003e o \u003ca href=\"https://reddit.com\"\u003ereddit.com\u003c/a\u003e. Es tambi√©n una forma de evitar los anuncios y poder ir directamente al contenido.\u003c/p\u003e","title":"RSS con elfeed en emacs"},{"content":"Las fechas y los objetos de fecha-hora son algunos de los tipos de datos m√°s exigentes con los que podemos trabajar. Pueden venir en una variedad de formatos (¬°viva la ISO 8601!), pueden tener diferentes zonas horarias y como resultado introducir una complejidad considerable.\nAdem√°s de las variaciones en formato, estas discrepancias pueden causar problemas grandes:\nM√°s a√∫n, las zonas horarias a√±aden otra capa de confusi√≥n. Veamos como pandas üêº maneja esto.\nNuestra DataFrame Base import pandas as pd items = { \u0026#34;name\u0026#34;: [\u0026#34;rose\u0026#34;, \u0026#34;sky\u0026#34;, \u0026#34;yolk\u0026#34;, \u0026#34;ebony\u0026#34;, \u0026#34;snow\u0026#34;], \u0026#34;price\u0026#34;: [50, 1200, 3, 40, 2], \u0026#34;date_created\u0026#34;: [\u0026#34;1999-10-30 05:00:00\u0026#34;, \u0026#34;2002-08-21 08:23:00\u0026#34;, \u0026#34;2003-05-15 14:19:00\u0026#34;, \u0026#34;2006-11-29 11:21:00\u0026#34;, \u0026#34;2018-02-12 23:23:00\u0026#34; ], } items_df = pd.DataFrame(items) Convirtiendo Texto (Strings) a Fechas en Pandas Vamos a ver como pandas interpreta los tipos de dato en nuestra dataframe:\nprint(items_df.dtypes) # Output: # name object # price int64 # date_created object Como podemos ver, la columna date_created es tratada como un object (probablemente porque contiene cadenas de texto o strings). Para poderla maejar como fecha-hora, necesitamos convertirla:\nitems_df[\u0026#34;date_created\u0026#34;] = pd.to_datetime(items_df[\u0026#34;date_created\u0026#34;]) print(items_df.dtypes) # Output: # name object # price int64 # date_created datetime64[ns] Ahora la columna date_created es correctamente procesada como datetime64[ns].\nFiltrando una DataFrame con Una Fecha La forma en que pandas maneja las fechas y horas es todav√≠a un poco misteriosa para m√≠. Yo entiendo que las fechas y horas son inherentemente complejas, pero siento que el comportamiento de pandas algunas veces es confuso. Por ejemplo, consider√° esta pregunta en Stack Overflow y la respuesta detallada de Quant. A pesar de que el diagrama no est√° perfectamente actualizado (a fecha de hoy, 2025-01-19), es todav√≠a bastante relevante y demuestra la complejidad involucrada.\nAqu√≠ est√° uno de esos comportamientos sorprendentes:\nA pesar de que nuestra columna date_created muestra ser de tipo datetime64[ns], cuando accedemos a sus elementos individuales se revela algo un poco distinto:\nprint(type(items_df[\u0026#34;date_created\u0026#34;].iloc[1])) # Output: \u0026lt;class \u0026#39;pandas._libs.tslibs.timestamps.Timestamp\u0026#39;\u0026gt; Cuando tratamos de filtrar esta columna utilizando una simple cadena de texto con una fecha, pandas autom√°ticamente coerce el texto a fecha, y la operaci√≥n funciona como se espera:\nstart_date_1 = \u0026#34;2000-01-01\u0026#34; filtered_items_1 = items_df[items_df[\u0026#34;date_created\u0026#34;] \u0026gt;= start_date_1] print(filtered_items_1) Sin embargo, si la cadena de texto incluye una hora y una zona horaria, pandas no hace la coerci√≥n autom√°tica, y la operaci√≥n falla:\nstart_date_2 = \u0026#34;2000-01-01 00:00:00-05:00\u0026#34; try: filtered_items_2 = items_df[items_df[\u0026#34;date_created\u0026#34;] \u0026gt;= start_date_2] except Exception as e: print(e) filtered_items_2 = \u0026#34;Nothing to see here\u0026#34; finally: print(filtered_items_2) # Output: # Invalid comparison between dtype=datetime64[ns] and str # Nothing to see here Pandas, tal vez obrando con cautela, evita la coerc√≠on en este caso, dej√°ndonos la responsabilidad a nosotros. Corrijamos esto manualmente convirtiendo la cadena de texto en un timestamp utilizando el mismo m√©todo que usamos antes:\nstart_date_2 = pd.to_datetime(start_date_2) print(type(start_date_2) == type(items_df[\u0026#34;date_created\u0026#34;].iloc[1])) # Output: True # Both are \u0026lt;class \u0026#39;pandas._libs.tslibs.timestamps.Timestamp\u0026#39;\u0026gt; En este punto los dos valores aparentemente son del mismo tipo, pero a√∫n no pueden ser comparados:\ntry: items_df[\u0026#39;date_created\u0026#39;].iloc[1] \u0026gt; start_date_2 except Exception as e: print(e) finally: pass # Output: # Cannot compare tz-naive and tz-aware timestamps El error ocurre porque una valor es timezone-naive (sin informaci√≥n sobre la zona horaria), y el otro es timezone-aware (con informaci√≥n de zona horaria). Para proceder, debemos convertir uno de ellos a que concuerde con el otro.\nSoluci√≥n 1: Convertir start_date_2 a Timezone-Naive start_date_naive = start_date_2.tz_localize(None) try: filtered_items_2 = items_df[items_df[\u0026#34;date_created\u0026#34;] \u0026gt;= start_date_naive] except Exception as e: print(e) filtered_items_2 = \u0026#34;Nothing to see here\u0026#34; finally: print(filtered_items_2) # The filtering succeeds! ü•≥ Soluci√≥n 2: Convertir items_df[\u0026quot;date_created\u0026quot;] a Timezone-Aware # Create a new column (optional) items_df[\u0026#34;new_date_created\u0026#34;] = items_df[\u0026#34;date_created\u0026#34;].dt.tz_localize(\u0026#34;America/Bogota\u0026#34;) # Now we can compare against our original timezone-aware variable try: filtered_items_2 = items_df[items_df[\u0026#34;new_date_created\u0026#34;] \u0026gt;= start_date_2] except Exception as e: print(e) filtered_items_2 = \u0026#34;Nothing to see here\u0026#34; finally: print(filtered_items_2) # It works! ü•≥ Un elemento clave aqu√≠ es el accesor .dt, que sirve como un gateway para plicar operaciones de fecha-hora en Series de pandas. De acuerdo con la documentaci√≥n, el accesor .dt \u0026ldquo;devuelve una Serie indexada como la Serie original. Eleva un TypeError si la Serie no contiene valores tipo fecha-hora\u0026rdquo;. Esto es esencial porque tz_localize opera en objetos datetime, no directamente en Series (¬°gracias wordsforthewise por el tip!).\nLas fechas y horas tienen sus trucos, pero pandas ofrece herramientas poderosas para manejarlas. Con algo de cuidado y estando alerta a los vericuetos de las fechas-hora, vamos a dominar estos retos ¬°muy pronto! üêº\n","permalink":"https://pavodive.github.io/es/posts/time_pandas_operations/","summary":"\u003cp\u003eLas fechas y los objetos de fecha-hora son algunos de los tipos de datos m√°s exigentes con los que podemos trabajar. Pueden venir en una variedad de formatos (¬°viva la \u003ca href=\"https:/es.wikipedia.org/wiki/ISO_8601\"\u003eISO 8601\u003c/a\u003e!), pueden tener diferentes zonas horarias y como resultado introducir una complejidad considerable.\u003c/p\u003e","title":"Operaciones B√°sicas con Fechas en Pandas"},{"content":"Hay algunas operaciones con pandas que frecuentemente olvido. Este sitio existe exactamente para eso: para recordarme como llevar a cabo esas operaciones. En este art√≠culo cubrir√© algunas operaciones muy b√°sicas que frecuentemente olvido, incluyendo la remoci√≥n de columnas, el reordenamiento de columnas y el cambio de nombre de columnas.\nPandas No gastar√© tiempo explicando pandas üêº, la poderosa librer√≠a de Python para procesamiento de datos. Pandas puede manejar varias operaciones complejas con datos y es una herramienta que debe tener cualquier persona que trabaje con datos.\nAl momento de escribir esto, soy mucho m√°s proficiente con R que con pandas, lo que podr√≠a explicar porqu√© olvido repetidamente estas sencillas operaciones.\nNuestra DataFrame Base import pandas as pd items = { \u0026#34;color\u0026#34;: [\u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;yellow\u0026#34;, \u0026#34;black\u0026#34;, \u0026#34;white\u0026#34;], \u0026#34;name\u0026#34;: [\u0026#34;rose\u0026#34;, \u0026#34;sky\u0026#34;, \u0026#34;yolk\u0026#34;, \u0026#34;ebony\u0026#34;, \u0026#34;snow\u0026#34;], \u0026#34;price\u0026#34;: [50, 1200, 3, 40, 2], \u0026#34;date_created\u0026#34;: [\u0026#34;1999-10-30 05:00:00\u0026#34;, \u0026#34;2002-08-21 08:23:00\u0026#34;, \u0026#34;2003-05-15 14:19:00\u0026#34;, \u0026#34;2006-11-29 11:21:00\u0026#34;, \u0026#34;2018-02-12 23:23:00\u0026#34; ], \u0026#34;useless_column\u0026#34;: [\u0026#34;data\u0026#34;, \u0026#34;data\u0026#34;, \u0026#34;data\u0026#34;, \u0026#34;data\u0026#34;, \u0026#34;data\u0026#34;], \u0026#34;id\u0026#34;: [\u0026#34;1999-ROS-01\u0026#34;, \u0026#34;2002-SKY-01\u0026#34;, \u0026#34;2003-YOL-03\u0026#34;, \u0026#34;2006-EBO-01\u0026#34;, \u0026#34;2018-SNO-03\u0026#34; ] } items_df = pd.DataFrame(items) Nuestra dataframe base es una tabla simple que contiene datos variados sobre algunos √≠tems. Incluso tiene una columna innecesaria, que vamos a eliminar prontamente.\nRemoviendo o Eliminando Columnas Vamos a librarnos de la columna in√∫til. El par√°metro inplace=True se explica a s√≠ mismo: remueve la columna en la misma dataframe, en lugar de devolvernos un objeto nuevo. De esta manera, la dataframe original es directamente actualizada.\nitems_df.drop(columns=[\u0026#34;useless_column\u0026#34;], inplace=True) Reordenamiento de Columnas Algunas veces necesito exportar dataframes a tablas o archivos CSV en los que el orden de las columnas es importante para los usuarios finales. Reordenar las columnas es tan simple como pasar una lista de nombres de columnas en el orden deseado:\nname_order = [\u0026#34;id\u0026#34;, \u0026#34;date_created\u0026#34;, \u0026#34;name\u0026#34;, \u0026#34;color\u0026#34;, \u0026#34;price\u0026#34;] items_df = items_df[name_order] Cambiando los Nombres de Columnas Otra operaci√≥n que frecuentemente necesito hacer es renombrar columnas. Para cambiar el nombre de una columna, hay que pasar un diccionario con el formato {\u0026quot;nombre_viejo\u0026quot;: \u0026quot;nombre_nuevo\u0026quot;} al m√©todo rename.\nitems_df.rename(columns={\u0026#34;id\u0026#34;: \u0026#34;sku\u0026#34;, \u0026#34;color\u0026#34;: \u0026#34;Color\u0026#34;}, inplace=True) ","permalink":"https://pavodive.github.io/es/posts/basic_pandas_operations/","summary":"\u003cp\u003eHay algunas operaciones con pandas que frecuentemente olvido. Este sitio existe exactamente para eso: para recordarme como llevar a cabo esas operaciones. En este art√≠culo cubrir√© algunas operaciones muy b√°sicas que frecuentemente olvido, incluyendo la remoci√≥n de columnas, el reordenamiento de columnas y el cambio de nombre de columnas.\u003c/p\u003e","title":"Operaciones B√°sicas con Pandas"},{"content":"Cruzar tablas es una de las tareas m√°s b√°sicas cuando se analizan datos. Y sin embargo, yo siempre parezco olvidar como se hacen los cruces de tablas (merges o joins) en pandas üêº. As√≠ que aqu√≠ esta este recordatorio para mi yo futuro (y aparentemente para vos, que aterrizaste aqu√≠ üòâ).\nCruzando Tablas con Pandas Nuestra DataFrame Base import pandas as pd items = { \u0026#34;color\u0026#34;: [\u0026#34;red\u0026#34;, \u0026#34;blue\u0026#34;, \u0026#34;yellow\u0026#34;, \u0026#34;black\u0026#34;, \u0026#34;white\u0026#34;], \u0026#34;price\u0026#34;: [50, 1200, 3, 40, 2], \u0026#34;date_created\u0026#34;: [\u0026#34;1999-10-30 05:00:00\u0026#34;, \u0026#34;2002-08-21 08:23:00\u0026#34;, \u0026#34;2003-05-15 14:19:00\u0026#34;, \u0026#34;2006-11-29 11:21:00\u0026#34;, \u0026#34;2018-02-12 23:23:00\u0026#34;], \u0026#34;sku\u0026#34;: [\u0026#34;1999-ROS-01\u0026#34;, \u0026#34;2002-SKY-01\u0026#34;, \u0026#34;2003-YOL-03\u0026#34;, \u0026#34;2006-EBO-01\u0026#34;, \u0026#34;2018-SNO-03\u0026#34;] } items_df = pd.DataFrame(items) Uniendo (Cruzando, Merging, Joining) Dos DataFrames con Pandas Ahora, vamos a cruzar dos dataframes utilizando pandas. Para esto, vamos a crear una dataframe de ventas para compararla con la que ya tenemos. Para ilustrar los diferentes tipos de uniones, A√±ad√≠ un nuevo SKU en el dataframe sales (ventas) que no existe en items_df. Tambi√©n llam√© la columna sku_sales para demostrar que las columnas clave (las que usaremos para el cruce) pueden tener diferentes nombres en las dos tablas.\nVas a notar que estoy usando pd.merge en lugar de pd.join. Eso es porque pd.join hace las uniones en los √≠ndices, mientras que el m√°s flexible pd.merge puede hacer uniones en columnas.\nsales = pd.DataFrame({ \u0026#34;sku_sales\u0026#34;: [\u0026#34;1999-ROS-01\u0026#34;, \u0026#34;2018-SNO-03\u0026#34;, \u0026#34;2020-NAN-01\u0026#34;, \u0026#34;2006-EBO-01\u0026#34;], \u0026#34;qty_sold\u0026#34;: [100, 5, 7, 24] }) Uni√≥n Izquierda: Todos los √çtems en Ventas (Sales) Una uni√≥n izquierda incluye todas las filas de la dataframe ventas. Si una fila en ventas no concuerda con una fila en items_df (basado en la clave de uni√≥n), vas a obtener NaN para los valores de las columnas que no concuerdan. Esto significa que vamos a ver todos los √≠tems en sales, pero que no vamos a ver informaci√≥n sobre los √≠tems en items_df que no vendieron.\nmerged_left = pd.merge(sales, items_df, left_on=\u0026#34;sku_sales\u0026#34;, right_on=\u0026#34;sku\u0026#34;, how=\u0026#34;left\u0026#34; ) print(merged_left) # sku_sales qty_sold color price date_created sku # 0 1999-ROS-01 100 red 50.0 1999-10-30 05:00:00 1999-ROS-01 # 1 2018-SNO-03 5 white 2.0 2018-02-12 23:23:00 2018-SNO-03 # 2 2020-NAN-01 7 NaN NaN NaN NaN # 3 2006-EBO-01 24 black 40.0 2006-11-29 11:21:00 2006-EBO-01 Tip: Para las uniones izquierda y derecha, es posible que quer√°s descartar una de las columnas clave duplicadas (sku_sales o sku). Si no pod√©s recordar c√≥mo descartar una columna (¬°como yo!), cheque√° este art√≠culo.\nUni√≥n Derecha: Todos los √çtems en items_df Una uni√≥n derecha incluye todas las filas de items_df. En este caso, vas a perder informaci√≥n sobre las filas de ventas (sales) que no concuerdan. Por ejemplo, el √≠tem 2020-NAN-01 no est√° incluido en el resultado, porque no existe en items_df.\nmerged_right = pd.merge(sales, items_df, left_on=\u0026#34;sku_sales\u0026#34;, right_on=\u0026#34;sku\u0026#34;, how=\u0026#34;right\u0026#34; ) print(merged_right) # sku_sales qty_sold color price date_created sku # 0 1999-ROS-01 100.0 red 50 1999-10-30 05:00:00 1999-ROS-01 # 1 NaN NaN blue 1200 2002-08-21 08:23:00 2002-SKY-01 # 2 NaN NaN yellow 3 2003-05-15 14:19:00 2003-YOL-03 # 3 2006-EBO-01 24.0 black 40 2006-11-29 11:21:00 2006-EBO-01 # 4 2018-SNO-03 5.0 white 2 2018-02-12 23:23:00 2018-SNO-03 Uni√≥n Externa: √çtems de Ambas DataFrames Las uniones externas incluyen todas las filas de ambas dataframes. Si un √≠tem s√≥lo aparece en una de las dos dataframes, entonces las columnas no concordantes tendr√°n valores NaN.\nmerged_outer = pd.merge(sales, items_df, left_on=\u0026#34;sku_sales\u0026#34;, right_on=\u0026#34;sku\u0026#34;, how=\u0026#34;outer\u0026#34; ) print(merged_outer) # sku_sales qty_sold color price date_created sku # 0 1999-ROS-01 100.0 red 50.0 1999-10-30 05:00:00 1999-ROS-01 # 1 NaN NaN blue 1200.0 2002-08-21 08:23:00 2002-SKY-01 # 2 NaN NaN yellow 3.0 2003-05-15 14:19:00 2003-YOL-03 # 3 2006-EBO-01 24.0 black 40.0 2006-11-29 11:21:00 2006-EBO-01 # 4 2018-SNO-03 5.0 white 2.0 2018-02-12 23:23:00 2018-SNO-03 # 5 2020-NAN-01 7.0 NaN NaN NaN NaN Uni√≥n Interna: √çtems en Ambas sales e items_df Una uni√≥n interna crea una nueva dataframe que contiene solamente las filas que existen en ambas dataframes (basado en la clave de uni√≥n).\nmerged_inner = pd.merge(sales, items_df, left_on=\u0026#34;sku_sales\u0026#34;, right_on=\u0026#34;sku\u0026#34;, how=\u0026#34;inner\u0026#34; ) print(merged_inner) # sku_sales qty_sold color price date_created sku # 0 1999-ROS-01 100 red 50 1999-10-30 05:00:00 1999-ROS-01 # 1 2018-SNO-03 5 white 2 2018-02-12 23:23:00 2018-SNO-03 # 2 2006-EBO-01 24 black 40 2006-11-29 11:21:00 2006-EBO-01 Uni√≥n Cruzada: El Producto Cartesiano de Ambas DataFrames Una uni√≥n cruzada puede ser √∫til en algunos casos espec√≠ficos (aunque no en este ejemplo). Produce el Producto Cartesiano de las dos dataframes, lo que significa que cada fila en sales es combinada con cada fila en items_df. Not√° que left_on y right_on no son necesarias en esta operaci√≥n.\nmerged_cross = pd.merge(sales, items_df, how=\u0026#34;cross\u0026#34; ) print(merged_cross) # sku_sales qty_sold color price date_created sku # 0 1999-ROS-01 100 red 50 1999-10-30 05:00:00 1999-ROS-01 # 1 1999-ROS-01 100 blue 1200 2002-08-21 08:23:00 2002-SKY-01 # 2 1999-ROS-01 100 yellow 3 2003-05-15 14:19:00 2003-YOL-03 # 3 1999-ROS-01 100 black 40 2006-11-29 11:21:00 2006-EBO-01 # 4 1999-ROS-01 100 white 2 2018-02-12 23:23:00 2018-SNO-03 # 5 2018-SNO-03 5 red 50 1999-10-30 05:00:00 1999-ROS-01 # 6 2018-SNO-03 5 blue 1200 2002-08-21 08:23:00 2002-SKY-01 # 7 2018-SNO-03 5 yellow 3 2003-05-15 14:19:00 2003-YOL-03 # 8 2018-SNO-03 5 black 40 2006-11-29 11:21:00 2006-EBO-01 # 9 2018-SNO-03 5 white 2 2018-02-12 23:23:00 2018-SNO-03 # 10 2020-NAN-01 7 red 50 1999-10-30 05:00:00 1999-ROS-01 # 11 2020-NAN-01 7 blue 1200 2002-08-21 08:23:00 2002-SKY-01 # 12 2020-NAN-01 7 yellow 3 2003-05-15 14:19:00 2003-YOL-03 # 13 2020-NAN-01 7 black 40 2006-11-29 11:21:00 2006-EBO-01 # 14 2020-NAN-01 7 white 2 2018-02-12 23:23:00 2018-SNO-03 # 15 2006-EBO-01 24 red 50 1999-10-30 05:00:00 1999-ROS-01 # 16 2006-EBO-01 24 blue 1200 2002-08-21 08:23:00 2002-SKY-01 # 17 2006-EBO-01 24 yellow 3 2003-05-15 14:19:00 2003-YOL-03 # 18 2006-EBO-01 24 black 40 2006-11-29 11:21:00 2006-EBO-01 # 19 2006-EBO-01 24 white 2 2018-02-12 23:23:00 2018-SNO-03 ","permalink":"https://pavodive.github.io/es/posts/merge_pandas_operations/","summary":"\u003cp\u003eCruzar tablas es una de las tareas m√°s b√°sicas cuando se analizan datos. Y sin embargo, yo siempre parezco olvidar como se hacen los cruces de tablas (merges o joins) en pandas üêº. As√≠ que aqu√≠ esta este recordatorio para mi yo futuro (y aparentemente para vos, que aterrizaste aqu√≠ üòâ).\u003c/p\u003e","title":"Operaciones B√°sicas de Cruce de Tablas con Pandas"},{"content":"Este art√≠culo ofrece una gu√≠a paso a paso para escribir paquetes de R utilizando el modo ESS de emacs (Emacs Speaks Statistics). Al finalizarla, vos habr√°s creado un paquete sencillo llamado dummyaddition, que puede hacer la sencilla tarea de sumar dos n√∫meros o concatenar dos cadenas de texto.\n¬øPor Qu√© Emacs? Emacs es una de esas piezas de software que ha pasado la prueba del tiempo. Aunque algunos pueden argumentar que la edad es una desventaja, yo pienso que el hecho de que emacs permanezca relevante despu√©s de m√°s de 40 a√±os es una prueba irrefutable de su dise√±o robusto y de su adaptabilidad a las necesidades modernas.\nEmacs es mucho m√°s que solo un editor de texto o un IDE ‚Äîes una herramienta poderosa que me ha permitido desarrollar un flujo de trabajo eficiente.\nAqu√≠ les presento algunas de las razones por las que prefiero emacs:\nEficiencia Centrada en Teclado Emacs est√° basado en la l√≠nea de comando, lo que significa que casi toda acci√≥n posible puede ser ejecutada a trav√©s del teclado. Yo rara vez utilizo el mouse durante mi trabajo. Depender del mouse pude causar dolor o molestia en manos y brazos, y desperdicia tiempo en movimientos innecesarios.\nExpansibilidad y Personalizaci√≥n Emacs es incre√≠blemente expansible y altamente personalizable. Ya sea que prefir√°s mantenerlo simple o convertirlo en una m√°quina compleja y poderosa, pod√©s ajustarlo a tus necesidades y para satisfacer tus deseos espec√≠ficos.\nF√°cil de Aprender A pesar de que algunas personas dicen que la curva de aprendizaje de emacs es empinada, yo opino distinto. Emacs sin modificaciones (o vainilla, como se le llama en ingl√©s) es muy f√°cil de usar y viene con una excelente documentaci√≥n. Pod√©s comenzar utilizando el mouse mientras te familiariz√°s con los atajos de teclado. No ser√° una diferencia muy grande con lo que seguramente est√°s usando ahora. Con el paso del tiempo, ir√°s aprendiendo a ampliar y personalizar emacs para que sea m√°s eficiente en tu flujo de trabajo.\nSoftware Libre y de C√≥digo Abierto Emacs es libre y gratuito. Pod√©s instalarlo en cualquier sistema operativo sin costo. No s√≥lo no tendr√°s que pagar, si no que no te van a quitar nada: ni tus datos, ni tus interacciones con el software, ni tu privacidad.\nQue sea de c√≥digo abierto significa que pod√©s modificar emacs e incluso compartir tus modificaciones con otros sin que teng√°s que preocuparte por asuntos legales. Emacs representa la verdadera libertad de software.\n¬øPor Qu√© un Paquete? Uno de los objetivos fundamentales del desarrollo de software es la automatizaci√≥n. Tareas que hacemos frecuentemente deber√≠an hacerse m√°s f√°ciles y r√°pidas de ejecutar. Es un escenario com√∫n: escrib√≠s una funci√≥n una vez, y luego la necesit√°s otra y otra vez\u0026hellip;\nEn lugar de reescribir la misma funci√≥n m√∫ltiples veces (cr√©eme, lo he hecho y no es divertido), o desperdiciar tiempo buscando por donde la escribiste la √∫ltima vez, es mejor consolidar esas funciones en un paquete (o librer√≠a). Un paquete te permite cargar y reutilizar sin mayor esfuerzo esas funciones cuando sea que las necesit√©s.\nCrear un paquete tambi√©n significa que pod√©s compartir tus funciones con otros que podr√≠an estar enfrentando el mismo problema que ya resolviste. Escribiendo paquetes est√°s contribuyendo a un ambiente colaborativo. Despu√©s de todo, estoy seguro que en alg√∫n momento has dependido fuertemente de paquetes de R escritos por otros, as√≠ que ¬øpor qu√© no devolver un poco de ese beneficio?\nResultado Final Siguiendo esta gu√≠a paso a paso, crear√°s un nuevo paquete llamado dummyaddition. Este paquete, a pesar de ser muy b√°sico, demostrar√° los pasos esenciales involucrados en la creaci√≥n de un paquete para R con emacs y ESS. Seguramente albergar√°s tu versi√≥n en tu repositorio de GitHub, pero si quer√©s ver la m√≠a como referencia, aqu√≠ est√° el enlace: dummyaddition.\nPaso a Paso Magit para Control de Versiones Crear un Repositorio en GitHub El primer paso es crear un nuevo repositorio en tu cuenta de GitHub. Yo he llamado al m√≠o dummyaddition, pero pod√©s escoger un nombre que tenga sentido para tu proyecto. Aunque llenar el campo descripci√≥n es opcional, de veras te recomiendo que lo hagas ‚Äîes muy √∫til tener una descripci√≥n clara de cada repositorio.\nTen√© en mente que las convenciones que CRAN establece para nombrar paquetes s√≥lo permiten caracteres ASCII y n√∫meros. Evit√° usar caracteres especiales como guiones, subrayados o puntos en el nombre.\nTambi√©n tendr√°s la opci√≥n de hacer tu repositorio p√∫blico o privado. Si est√°s planeando compartir tu c√≥digo (a lo que te exhorto), hac√© que el repositorio sea p√∫blico.\nAntes de crear el repositorio, configur√° los siguientes ajustes menores pero muy importantes:\nInicializ√° con un README.md: Marc√° esta casilla. Usaremos este archivo posteriormente. A√±ad√≠ un archivo .gitignore: Seleccion√° la plantilla para R. Esto nos asegura que Git ignora archivos innecesarios para nuestro proyecto, tales como .history, que no agregan ning√∫n valor. Escog√© una licencia: Github nos ofrece varias opciones de licenciamiento de nuestro software. Dos muy comunes son la MIT License y la GNU General Public License v3.0. Asegur√°te de leer sobre sus diferencias, ya que ellas pueden afectar c√≥mo puede usarse tu software. Para este tutorial, he escogido la licencia GNU General Public License v3.0. Adicionalmente, cheque√° las licencias de los paquetes de R que plane√°s utilizar en tu c√≥digo. Algunas licencias requerir√°n que adopt√©s licencias compatibles o menos restrictivas en tu paquete. Una vez has configurado estos ajustes, hac√© click en Create Repository.\nMagit Magit es un paquete de emacs que act√∫a como un h√≠brido entre un cliente gr√°fico de Git y la interfaz de l√≠nea de comando est√°ndar. Magit nos ofrece comandos amigables para las acciones de Git. Yo uso Magit porque simplifica las interacciones con Git, y s√≥lo necesito recordar unos pocos comandos b√°sicos. Es bastante amigable, y si quieres explorar los comandos de Git que Magit ejecuta internamente, est√°n f√°cilmente disponibles para que puedas auditarlos o estudiarlos.\nSi Git no est√° instalado en tus sistema, pod√©s seguir las instrucciones oficiales de instalaci√≥n aqu√≠.\nDespu√©s de instalar Git, configur√° tu nombre y email para asociar los commits con tu identidad:\ngit config --global user.name \u0026#34;John Doe\u0026#34; git config --global user.email johndoe@example.com Posteriormente, instal√° Magit para emacs. Si no lo has instalado a√∫n, re recomiendo que lo hag√°s v√≠a MELPA, el repositorio de paquetes de emacs. A√±ad√≠ las siguientes l√≠neas a tu archivo .emacs:\n(require \u0026#39;package) (add-to-list \u0026#39;package-archives \u0026#39;(\u0026#34;melpa\u0026#34; . \u0026#34;https://melpa.org/packages/\u0026#34;) t) Seleccion√° el bloque de texto que acabas de pegar y evalu√°lo en emacs con M-x eval-region RET, y luego refresc√° tu lista de paquetes con:\nM-x package-refresh-contents RET Ahora pod√©s instalar Magit y sus dependencias ejecutando:\nM-x package-install RET magit RET Para asegurar que todo funciona como esperamos, reinici√° tu sesi√≥n de emacs. Esto restablece el load-path y evita problemas potenciales asociados a configuraciones anteriores.\nClonando el Repositorio Ahora es el momento de clonar el repositorio de GitHub a tu computador.\nNaveg√° al directorio donde quer√©s clonar el repositorio. Por ejemplo, si quer√©s clonarlo en ~/Documentos, abr√≠ el modo Dired de emacs con C-x D y escrib√≠ ~/Documents para abrir el directorio correspondiente.\nAhora corr√© los siguientes comandos en emacs:\nM-x magit-clone Magit te preguntar√° de d√≥nde quer√©s clonar el repositorio. Escog√© [u] para URL. Luego peg√° la URL del repositorio de tu p√°gina de GitHub. La pod√©s encontrar haciendo click en el bot√≥n verde que dice \u0026ldquo;\u0026lt;\u0026gt; Code\u0026rdquo; y copi√°s la URL para HTTPS. Por ejemplo:\nhttps://github.com/PavoDive/dummyaddition.git Peg√° esta URL en el minibuffer de Magit.\nMagit te va a pedir confirmar el nombre del subdirectorio en el que el repositorio ser√° clonado. Por defecto, √©l nos sugiere el nombre del repositorio (en nuestro caso dummyaddition). Yo recomiendo que lo manteng√°s as√≠ para guardar consistencia.\nTambi√©n te preguntar√° \u0026ldquo;Set remote.pushDefault to origin? (y or n)\u0026rdquo; (¬øEstablecer remote.pushDefault a origin? (s o n)). Ya que este es el comienzo de un nuevo repositorio, pod√©s escoger yes (y) con tranquilidad.\nDespu√©s de unos instantes, Magit terminar√° el proceso de clonado y mostrar√° un nuevo buffer con los detalles del repositorio y el commit m√°s reciente. Pod√©s presionar TAB para expandir los detalles de los commits.\nPara verificar que el repositorio ha sido clonado, refresc√° el buffer de Dired presionando g. Deber√≠as ver un nuevo directorio ‚Äîdummyaddition‚Äî dentro de tu directorio ~/Documents. Naveg√° a este directorio y vas a encontrar:\ndrwxrwxr-x 8 gp gp 4.0K Jan 11 17:44 .git -rw-rw-r-- 1 gp gp 671 Jan 11 17:44 .gitignore -rw-rw-r-- 1 gp gp 35K Jan 11 17:44 LICENSE -rw-rw-r-- 1 gp gp 26 Jan 11 17:44 README.md Estos incluyen los archivos y directorios creados durante la configuraci√≥n de GitHub:\n.gitignore: Preconfigurado para ignorar archivos innecesarios. LICENSE: La licencia que escogiste durante la configuraci√≥n inicial. README.md: El archivo README inicial. .git/: Un directorio oculto que contiene metadata sobre el control de versiones. Listo Para Comenzar a Desarrollar ¬°Ahora est√°s listo para comenzar a desarrollar tu paquete de R! üéâ\nPaquetes Requeridos Para hacer la escritura de paquetes de R m√°s f√°cil y eficiente, necesitamos instalar dos paquetes esenciales:\nrmarkdown: Convierte documentos de R Markdown a otros varios formatos. devtools: Una colecci√≥n de herramientas de desarrollo de paquetes. Literalmente ¬°un paquete que te ayuda a desarrollar paquetes! Si estos no est√°n instalados a√∫n, comenz√° una nueva sesi√≥n de R en tu directorio Documents ejecutando M-x R en emacs. Una vez la sesi√≥n comience, ingres√° los siguientes comandos:\ninstall.packages(\u0026#34;rmarkdown\u0026#34;) install.packages(\u0026#34;devtools\u0026#34;) Estos paquetes podr√≠an requerir dependencias adicionales. Ya que el proceso de instalaci√≥n var√≠a dependiendo de tu sistema, es posible que encontr√©s errores. Si es as√≠ ¬°no te preocup√©s! Respir√° profundo, busc√° en DuckDuckGo los errores y resolv√© cualquier problema que encontr√©s.\nManten√© la Calma e Intent√° de Nuevo\nDespu√©s de que hay√°s instalado los paquetes, carg√°los en tu sesi√≥n de R:\nlibrary(rmarkdown) library(devtools) Cre√° el Paquete Ahora que hemos configurado las herramientas necesarias, vamos a crear el paquete. En tu sesi√≥n de R, ejecut√°:\ncreate(\u0026#34;dummyaddition\u0026#34;) Esto crear√° un nuevo paquete de R llamado dummyaddition, dentro del correspondiente directorio dummyaddition.\n‚ö† Nota Importante: Asegur√°te de que la sesi√≥n de R no est√° dentro del directorio dummyaddition cuando ejecut√©s devtools::create. De lo contrario tratar√° de crear un paquete anidado (es decir, un directorio dummyaddition dentro de otro directorio dummyaddition), lo cual puede ser problem√°tico.\nCuando ejecuta, la funci√≥n muestra la siguiente informaci√≥n en tu consola de R:\n‚úî Setting active project to \u0026#34;/home/gp/Documents/dummyaddition\u0026#34;. ‚úî Creating R/. ‚úî Writing DESCRIPTION. Package: dummyaddition Title: What the Package Does (One Line, Title Case) Version: 0.0.0.9000 Authors@R (parsed): * First Last \u0026lt;first.last@example.com\u0026gt; [aut, cre] Description: What the package does (one paragraph). License: `use_mit_license()`, `use_gpl3_license()` or friends to pick a license Encoding: UTF-8 Roxygen: list(markdown = TRUE) RoxygenNote: 7.3.2 ‚úî Writing NAMESPACE. ‚úî Setting active project to \u0026#34;\u0026lt;no active project\u0026gt;\u0026#34;. ¬øQu√© Fue Creado? Notar√°s los siguientes elementos en tu directorio dummyaddition:\nDESCRIPTION: Describe la metadata de tu paquete (por ejemplo, nombre, autor, versi√≥n y descripci√≥n). Edit√° este archivo siguiendo las instrucciones en √©l. NAMESPACE: Maneja las funciones importadas y exportadas. Este archivo se genera autom√°ticamente‚Äîevit√° editarlo manualmente. R/: Un directorio para que guard√©s las funciones y c√≥digo de tu paquete. En este momento estar√° vac√≠o. En este punto, ya tenemos el esqueleto del paquete. ¬°Ahora escribamos el c√≥digo!\nEscribiendo el C√≥digo Vamos a definir la funci√≥n central de nuestro paquete. Cre√° un nuevo archivo llamado addition.R dentro del directorio R/ y en √©l ingres√° el siguiente c√≥digo:\n1 2 3 4 5 6 7 8 9 10 addition \u0026lt;- function(a, b) { if (length(a) \u0026gt; 1 || length(b) \u0026gt; 1) { stop(\u0026#34;I can\u0026#39;t accept a vector. Sorry.\u0026#34;) } if (is.numeric(a) == TRUE \u0026amp;\u0026amp; is.numeric(b) == TRUE) { a + b }else { paste0(as.character(a), as.character(b)) } } Por supuesto, tu paquete puede incluir m√∫ltiples funciones de complejidad variable. Como recomendaci√≥n general, pon√© cada funci√≥n exportada en su propio archivo. Est√° bien incluir funciones auxiliares (internas) en el mismo archivo que las utiliza.\nDocumentando las Funciones La documentaci√≥n es un aspecto crucial del desarrollo de paquetes, y con devtools f√°cilmente la pod√©s manejar utilizando roxygen2. Esto involucra la escritura de comentarios especiales en el encabezado de cada funci√≥n para describe su prop√≥sito, uso y argumentos.\nVamos a documentar nuestra funci√≥n addition a√±adiendo el siguiente texto encima de su definici√≥n en el archivo addition.R:\n#\u0026#39; Add two numeric values or paste two character values. #\u0026#39; #\u0026#39; This function takes two single values and adds them, #\u0026#39; if they are numeric, or pastes them together, otherwise. #\u0026#39; The function checks the length of each argument, and #\u0026#39; returns an error if any of the arguments has length #\u0026#39; greater than one. #\u0026#39; #\u0026#39; @usage addition(a, b)n #\u0026#39; @keywords addition, pasting, sum. #\u0026#39; @param a A single value that is numeric, character or that #\u0026#39; can be coerced to character. #\u0026#39; @param b A single value that is numeric, character or that #\u0026#39; can be coerced to character. #\u0026#39; @return A numeric value with the sum of a and b, if both #\u0026#39; are numeric, or a string if both values can be coerced to #\u0026#39; to string. #\u0026#39; @examples #\u0026#39; # Adding numerc values #\u0026#39; addition(1, 6) #\u0026#39; # Pasting strings together #\u0026#39; addition(\u0026#34;nice \u0026#34;, \u0026#34;function\u0026#34;) #\u0026#39; @export Puntos Clave Sobre la Documentaci√≥n: #' denota un comentario de documentaci√≥n. La etiqueta @export es esencial para hacer disponible nuestra funci√≥n a usuarios del paquete. Las funciones sin esta etiqueta son tratadas como internas. Etiquetas como @param, @return, @keywords y @examples ofrecen detalles estructurados a cerca de la funci√≥n. Una Nota Sobre la Importaci√≥n de Otros Paquetes Si tu paquete depende de librer√≠as externas, deber√°s incluir la etiqueta @import en tu documentaci√≥n, as√≠:\n#\u0026#39; @import data.table Esto asegura que el paquete importa correctamente la funcionalidad externa.\nCon la funci√≥n principal implementada y documentada, est√°s en camino de construir un paquete funcional de R . ¬°Gran trabajo hasta ahora! üéâ\nConstruir la Documentaci√≥n Para construir la documentaci√≥n para tu paquete, asegur√°te de que tu directorio de trabajo est√° establecido como el directorio ra√≠z de tu paquete (dummyaddition). Si no has cerrado tu sesi√≥n de R, simplemente pod√©s usar:\nsetwd(\u0026#34;dummyaddition\u0026#34;) Si ya hab√≠as cerrado la sesi√≥n, simplemente comenz√° una nueva sesi√≥n de R en el directorio correcto y carg√° de nuevo las librer√≠as (devtools y rmarkdown) usando library().\nAhora, us√° la funci√≥n devtools::document(), un wrapper de la funci√≥n roxygen2::roxygenize(), para generar la documentaci√≥n. Ejecut√°:\ndocument() Esto produce el siguiente output:\n‚Ñπ Updating dummyaddition documentation ‚Ñπ Loading dummyaddition Writing NAMESPACE Writing addition.Rd Veamos en detalle lo que ocurre cuando corr√©s este comando:\nEl archivo NAMESPACE fue actualizado autom√°ticamente: ahora incluye la informaci√≥n requerida para exportar la funci√≥n addition. El directorio man fue creado, si no exist√≠a ya. Este directorio contiene archivos de documentaci√≥n para sus funciones exportadas, escritos en formato .Rd. Por ejemplo: addition.Rd: Este archivo fue generado a partir de los comentarios especiales en el archivo addition.R. Contiene documentaci√≥n en un formato reconocido por R. Nota: No modifiqu√©s este archivo directamente, ya que es generado autom√°ticamente. En este punto, ya pod√©s acceder a la ayuda de tu funci√≥n, a√∫n cuando el paquete no ha sido a√∫n instalado. Para hacerlo, segu√≠ este proceso espec√≠fico:\n\u0026gt; ? + addition En este c√≥digo\n\u0026gt; representa el prompt de R. + indica una l√≠nea de continuaci√≥n (una caracter√≠stica de emacs). Esto quiere decir: escrib√≠ ? y cuando emacs te ofrezca la siguiente l√≠nea, escrib√≠ addition.\nCuando corr√©s este comando, vas a ver una p√°gina de ayuda para tu funci√≥n cuidadosamente formateada, presentada como si tu paquete estuviera completamente instalado.\n‚Ñπ Rendering development documentation for \u0026#34;addition\u0026#34; addition package:dummyaddition R Documentation Add two numeric values or paste two character values. Description: This function takes two single values and adds them, if they are numeric, or pastes them together, otherwise. The function checks the length of each argument, and returns an error if any of the arguments has length greater than one. Usage: addition(a, b) Arguments: a: A single value that is numeric, character or that can be coerced to character. b: A single value that is numeric, character or that can be coerced to character. Value: A numeric value with the sum of a and b, if both are numeric, or a string if both values can be coerced to to string. Examples: # Adding numerc values addition(1, 6) # Pasting strings together addition(\u0026#34;nice \u0026#34;, \u0026#34;function\u0026#34;) Esto confirma que tu documentaci√≥n est√° funcionando correctamente y que tu paquete est√° bien estructurado.\nUn PDF Bonito Vamos a generar un PDF bien formateado para nuestro paquete‚Äîexactamente como los que has visto en los paquetes famosos de R.\nPara producir este PDF, vas a necesitar utilizar el terminal de emacs (shell) o eshell. Abr√≠lo con M-x shell o con M-x eshell y naveg√° al directorio padre de tu proyecto (Documents en este ejemplo). Luego corr√© el siguiente comando en la terminal:\nR CMD Rd2pdf dummyaddition Esto generar√° un archivo PDF llamado dummyaddition.pdf en el directorio Documentos.\n‚ö† Nota Importante: Podr√≠as necesitar LaTeX y Pandoc instalados en tu sistema para poder crear el PDF. Si no est√°n instalados, busc√° en l√≠nea instrucciones espec√≠ficas de instalaci√≥n para tu plataforma (y prepar√°te un caf√©, eso puede requerir tiempo y paciencia).\nActualiz√° el Archivo README.md El archivo README.md es la \u0026ldquo;cara\u0026rdquo; de tu paquete. Es lo que la gente ve primero cuando visitan tu repositorio (especialmente en GitHub), as√≠ que es importante actualizarlo con informaci√≥n relevante.\nComo m√≠nimo, tu archivo README.md debe incluir:\nLo que tu paquete hace: Brinda una explicaci√≥n clara y simple del problema que tu paquete resuelve. C√≥mo instalarlo: Incluye instrucciones de instalaci√≥n. Por ejemplo, pod√©s a√±adir lo siguiente si tu paquete est√° alojado en GitHub: devtools::install_github(\u0026#34;yourusername/dummyaddition\u0026#34;) Reemplaz√° \u0026quot;yourusername\u0026quot;con tu usuario de GitHub y \u0026quot;dummyaddition\u0026quot; con el nombre de tu paquete.\nSubiendo tu Paquete Nuevo a GitHub Una vez has completado tu c√≥digo, documentaci√≥n y actualizaciones al archivo README.md, es hora de subir (push) tus cambios a GitHub. Magit hace este proceso f√°cil y eficiente.\nAbr√≠ el buffer de Magit de tu repositorio, t√≠picamente llamado magit: dummyaddition. Si no est√° abierto, lo pod√©s activar con el comando:\nM-x magit-status Refresc√° el status del repositorio presionando g en el buffer de Magit. Ver√°s algo como esto:\nHead: main Initial commit Merge: origin/main Initial commit Push: origin/main Initial commit Untracked files (4) Unstaged changes (1) Recent commits Pod√©s expandir secciones espec√≠ficas (por ejemplo untracked files, unstaged changes, recent commits) presionando TAB.\nStaging y Committing Cambios Untracked files: Cuando expand√≠s la secci√≥n \u0026ldquo;Untracked files\u0026rdquo;, ver√°s archivos como DESCRIPTION, NAMESPACE, y directorios como man/ y R/. Estos son los nuevos archivos y directorios que hemos creado durante el proceso de desarrollo.\nStage estos cambios seleccionando el archivo o directorio y presionando s (de stage). Los archivos staged ahora aparecer√°n en la secci√≥n \u0026ldquo;Staged changes\u0026rdquo;. Unstaged changes: Vas a notar que el archivo README.md aparece aqu√≠ porque fue modificado (no creado nuevo). Stage estos cambios con s nuevamente. Magit podr√≠a preguntarte si quer√©s stage todos los cambios ‚Äîpresion√° y para confirmar.\nUna vez todos los cambios est√°n staged en la secci√≥n \u0026ldquo;Staged changes\u0026rdquo;, hac√© el commit de ellos presionando c (de commit). Un men√∫ aparecer√°. Presion√° c nuevamente para crear el commit.\nEscribiendo el Mensaje de Commit Una vez comenc√©s el proceso de commit, un buffer se abrir√° para que escrib√°s el mensaje de commit. Los mensajes de commit debe ser concisos y explicativos. Por ejemplo:\nT√≠tulo: Resum√≠ el commit claramente en una l√≠nea. Cuerpo (opcional): Adicion√° m√°s detalles si es necesario, especialmente si los cambios son complejos. Aqu√≠ est√° un ejemplo de mensaje de commit para nuestro trabajo:\nC√≥digo y Documentaci√≥n Generada - Creada la funci√≥n central `addition`. - Creada por auto-generaci√≥n la documentaci√≥n con roxygen2. - Actualizado el archivo README.md. Despu√©s de escribir tu mensaje de commit, guard√°lo presionando C-c C-c para confirmar y cerrar el buffer.\nEsto actualizar√° el buffer de magit, que ahora podr√° decir algo como:\nUnmerged into origin/main (1) 56d6bd3 main C√≥digo y Documentaci√≥n Generada Esto significa que tus cambios han sido commited localmente pero a√∫n no hemos subido (pushed) al repositorio de GitHub.\nSubiendo (Pushing) a GitHub Para pushar tus cambios a GitHub, presion√° P (de push) en el buffer de Magit. Un men√∫ aparecer√°, presion√° p para subir tus cambios a origin/main.\nMagit podr√≠a preguntarte por tus credenciales de GitHub (usuario y password), si no las has configurado para SSH o autenticaci√≥n con token. Ingres√° la informaci√≥n requerida, y despu√©s de un momento, el buffer de Magit reflejar√° que los cambios han sido pushed:\nRecent commits 56d6bd3 origin/main C√≥digo y Documentaci√≥n Generada 4b1b6c8 Initial commit En este punto tus cambios est√°n activos en GitHub. Pod√©s verificarlos visitando tu repositorio en GitHub.\nCompart√≠ tu Paquete ¬°Tu camino no est√° completo hasta que no compart√°s tu trabajo! A pesar de que este paquete resuelva un problema particular para vos, es bien probable que alguno de los 8 mil millones de humanos que poblamos este planeta üåç pueda enfrentar el mismo reto en el futuro. Compartir tu trabajo puede ayudarlos a ellos tambi√©n.\nAqu√≠ hay algunas formas de compartir tu paquete:\nPublic√° sobre √©l en tus redes sociales. Escrib√≠ un blog sobre lo que hace. Compart√≠lo en plataformas como Hacker News o Lobste.rs. Mencion√°lo en foros o comunidades relevantes. Cualquier m√©todo que escoj√°s, ¬°no te olvid√©s de compartir tu excelente trabajo con el mundo!\n","permalink":"https://pavodive.github.io/es/posts/writing-r-package-emacs/","summary":"\u003cp\u003eEste art√≠culo ofrece una gu√≠a paso a paso para escribir paquetes de R utilizando el modo ESS de emacs (Emacs Speaks Statistics). Al finalizarla, vos habr√°s creado un paquete sencillo llamado \u003ccode\u003edummyaddition\u003c/code\u003e, que puede hacer la sencilla tarea de sumar dos n√∫meros o concatenar dos cadenas de texto.\u003c/p\u003e","title":"Escribiendo un Paquete para R con Emacs"},{"content":"En documentos de tipo legal en espa√±ol con frecuencia es necesario agregar el \u0026ldquo;valor en letras\u0026rdquo; de un n√∫mero: $2400 (dos mil cuatrocientos pesos). Escrib√≠ el paquete spanish2 para hacer exactamente esta tarea. Si quieres conocer m√°s sobre este paquete, contin√∫a la lectura. Si quieres instalar el paquete o ver su c√≥digo, lo puedes hacer desde el repo en github. La escritura de este paquete inspir√≥ este art√≠culo sobre c√≥mo escribir un paquete de R con emacs y ESS (Emacs Speaks Statistics), tal vez le quieras dar una mirada.\n¬øPor qu√© escribir el valor en letras? No s√© si es solamente una costumbre en mi pa√≠süá®üá¥, pero en textos legales aqu√≠ se acostumbra escribir el valor en letras inmediatamente despu√©s de una cantidad. Por ejemplo:\n\u0026hellip;con un precio de $1.000.000 (un mill√≥n de pesos)\u0026hellip;\no\n\u0026hellip;el lote tiene un √°rea de 43 ha (cuarenta y tres hect√°reas)\u0026hellip;\nDebido a unas colaboraciones que hago, me he enfrentado a esa situaci√≥n muchas veces durante los √∫ltimos meses.\n¬øQu√© alternativas ten√≠a? Hay un paquete en CRAN y en github llamado spanish que cumple casi con la funcionalidad que necesitaba. El paquete tiene una funci√≥n, spanish::to_words() que convierte los n√∫meros en texto. Pero esta funci√≥n ten√≠a algunas limitaciones:\nPrimer inconveniente: Representaciones Incorrectas de N√∫meros En ciertos casos, el paquete generaba representaciones de texto incorrectas para n√∫meros. Por ejemplo:\n1 2 spanish::to_words(40000000) # \u0026#34;cuarenta millones mil \u0026#34; Puede identificar algunos de estos casos y sugerir un ajuste al c√≥digo, pero luego encontr√© nuevos casos de la peor forma posible: en un documento terminado y entregado a un cliente üòµ.\nSegundo Inconveniente: Rango Limitado El paquete tambi√©n tiene una limitaci√≥n importante: no puede procesar n√∫meros mayores a 999,999,999.\nCreando una Soluci√≥n: spanish2 As√≠ que hab√≠a que desarrollar una soluci√≥n para el problema que ten√≠a en frente, y no hay nada mejor que estandarizar las soluciones que te sirven a t√≠, es posible que alguien m√°s las pueda utilizar: all√≠ nace el paquete spanish2.\nNota Importante: Aunque el paquete spanish no cumpli√≥ mis necesidades espec√≠ficas para esta tarea, tiene unas funciones √∫nicas y muy valiosas. Por ejemplo, to_number(), convierte valores en letras a sus equivalentes en n√∫meros, y el paquete incluye funcionalidad relacionada con geolocalizaci√≥n en Espa√±a. Si estas funcionalidades suentan interesante, ¬°te invito a probar el paquete spanish!\nEstrategia de soluci√≥n Para convertir de n√∫meros a letras, segu√≠ el mismo principio que seguimos cuando leemos n√∫meros en espa√±ol:\nAgrupar los n√∫meros de 3 en 3, de derecha a izquierda. Leer estos n√∫meros de \u0026ldquo;centenas\u0026rdquo; (esta idea result√≥ clave, ya explicoüòâ). Unir los diferentes bloques de \u0026ldquo;centenas\u0026rdquo; y finalmente Depurar el texto. Agrupar los n√∫meros de 3 en 3 y leerlos en \u0026ldquo;centenas\u0026rdquo; Lo primero es convertir el n√∫mero en una cadena de texto, y luego dividirlo en grupos de 3 d√≠gitos, para lo que utilizamos un regex (expresi√≥n regular):\ngroups = regmatches(y, gregexpr(\u0026#34;.{1,3}(?=(.{3})*$)\u0026#34;, y, perl = TRUE))[[1]] Una vez hemos dividido el n√∫mero en grupos de 3 d√≠gitos, pasamos cada uno de esos grupos a la funci√≥n convert_3_digits. La funci√≥n convert_3_digits \u0026ldquo;lee\u0026rdquo; centenas, decenas y unidades:\n1 2 3 4 5 6 7 8 9 10 convert_3_digits = function(string_value){ units = c(\u0026#34;cero\u0026#34;, \u0026#34;uno\u0026#34;, \u0026#34;dos\u0026#34;, \u0026#34;tres\u0026#34;, \u0026#34;cuatro\u0026#34;, \u0026#34;cinco\u0026#34;, \u0026#34;seis\u0026#34;, \u0026#34;siete\u0026#34;, \u0026#34;ocho\u0026#34;, \u0026#34;nueve\u0026#34;) string_value = sprintf(\u0026#34;%03d\u0026#34;, as.integer(string_value)) digits = strsplit(string_value, \u0026#34;\u0026#34;)[[1]] a = sapply(digits, function(x) units[as.integer(x) + 1]) raw_text = mapply(paste0, a, c(\u0026#34;cientos\u0026#34;, \u0026#34;diez y\u0026#34;, \u0026#34;\u0026#34;)) clean_text(paste(raw_text, collapse = \u0026#34; \u0026#34;)) } B√°sicamente lo que hacemos con el sapply es convertir cada d√≠gito a su equivalente texto: 234 quedar√° convertido en c(\u0026quot;dos\u0026quot;, \u0026quot;tres\u0026quot;, \u0026quot;cuatro\u0026quot;). Lo que hacemos con mapply es mapear este vector al vector de centenas, decenas y unidades, resultando en dos cientos tres diez y cuatro. La funci√≥n clean_text convierte algunos casos at√≠picos, como \u0026ldquo;tres diez\u0026rdquo;, que verdaderamente es \u0026ldquo;treinta\u0026rdquo;.\nMapear las grandes unidades Hasta este punto tenemos un n√∫mero convertido en texto en grupos de tres. Por ejemplo, el n√∫mero 1 234 567 estar√≠a convertido en c(\u0026quot;cero cientos cero diez y uno\u0026quot;, \u0026quot;dos cientos tres diez y cuatro\u0026quot;, \u0026quot;cinco cientos seis diez y siete\u0026quot;). Pero eso no tiene mayor sentido, ¬øcierto?\nEs necesario mapear este vector a un vector que nos indique las grandes unidades: el segundo grupo de derecha a izquierda ser√°n \u0026ldquo;miles\u0026rdquo;, y el trecer grupo ser√°n \u0026ldquo;millones\u0026rdquo;. Despu√©s de usar mapply, el texto quedara convertido en \u0026ldquo;cero cientos cero diez y uno millones dos cientos tres diez y cuatro mil cinco cientos seis diez y siete\u0026rdquo;. Esto se ve mal, pero en esencia est√° correcto.\nLimpiar el texto En esta √∫ltima parte utilizamos mucho la funci√≥n gsub para reemplazar expresiones regulares en la cadena de texto. Esencialmente vamos a:\nRetirar lo que no sirve: \u0026ldquo;cero cientos\u0026rdquo; no debe aparecer, \u0026ldquo;cero diez y\u0026rdquo; tampoco. Ajustar algunas pronunciaciones especiales: \u0026ldquo;diez y cinco\u0026rdquo; es quince, \u0026ldquo;diez y tres\u0026rdquo; es trece, etc. Qu√© logramos La funci√≥n spanish2::to_words() convierte n√∫meros hasta 1e22 o cadenas de texto con n√∫meros de hasta 60 caracteres. ¬°Esos son n√∫meros muy grandes!\nLa conversi√≥n a texto sigue el est√°ndar del idioma espa√±ol que es usar la escala num√©rica larga, y por lo tanto el n√∫mero 1e9 (1,000,000,000) ser√° convertido a \u0026ldquo;mil millones\u0026rdquo; (no a un bill√≥n, como puede ser la expectativa de personas angloparlantes que est√°n acostumbradas a la escala corta).\nLa conversi√≥n sigue la forma m√°s est√°ndar y sencilla de expresar n√∫meros, a pesar de que puedan existir otras posibles representaciones:\nN√∫mero Estilo 1 Otros Estilos resultado de spanish2 77 Setenta y siete setenta y siete 16 Diecis√©is Diez y seis diez y seis 27 Veintisiete Veinte y siete veinte y siete 1100 Mil cien Mil ciento / mil y ciento mil cien Espero que este paquete te sea de utilidad, si es as√≠ ¬øqu√© tal darle una estrellita en github‚≠ê?\nDale ‚≠ê en github\n","permalink":"https://pavodive.github.io/es/posts/spanish2/","summary":"\u003cp\u003eEn documentos de tipo legal en espa√±ol con frecuencia es necesario agregar el \u0026ldquo;valor en letras\u0026rdquo; de un n√∫mero: $2400 (dos mil cuatrocientos pesos). Escrib√≠ el paquete \u003ccode\u003espanish2\u003c/code\u003e para hacer exactamente esta tarea. Si quieres conocer m√°s sobre este paquete, contin√∫a la lectura. Si quieres instalar el paquete o ver su c√≥digo, lo puedes hacer desde el repo en \u003ca href=\"https://github.com/pavodive/spanish2\"\u003egithub\u003c/a\u003e. La escritura de este paquete inspir√≥ \u003ca href=\"https://pavodive.github.io/es/posts/writing-r-package-emacs/\" title=\"Escribir un paquete de R con ESS\"\u003eeste art√≠culo\u003c/a\u003e sobre c√≥mo escribir un paquete de R con emacs y ESS (Emacs Speaks Statistics), tal vez le quieras dar una mirada.\u003c/p\u003e","title":"Paquete spanish2 para R"}]